PERL5282DELTA(1)        Perl Programmers Reference Guide        PERL5282DELTA(1)




NAME
       perl5282delta - what is new for perl v5.28.2

DESCRIPTION
       This document describes differences between the 5.28.1 release and the
       5.28.2 release.

       If you are upgrading from an earlier release such as 5.28.0, first read
       perl5281delta, which describes differences between 5.28.0 and 5.28.1.

Incompatible Changes
   Any set of digits in the Common script are legal in a script run of another
       script
       There are several sets of digits in the Common script.  "[0-9]" is the
       most familiar.  But there are also "[\x{FF10}-\x{FF19}]" (FULLWIDTH DIGIT
       ZERO - FULLWIDTH DIGIT NINE), and several sets for use in mathematical
       notation, such as the MATHEMATICAL DOUBLE-STRUCK DIGITs.  Any of these
       sets should be able to appear in script runs of, say, Greek.  But the
       previous design overlooked all but the ASCII digits "[0-9]", so the
       design was flawed.  This has been fixed, so is both a bug fix and an
       incompatibility.

       All digits in a run still have to come from the same set of ten digits.

       [perl #133547] <https://rt.perl.org/Ticket/Display.html?id=133547>

Modules and Pragmata
   Updated Modules and Pragmata
       •   Module::CoreList has been upgraded from version 5.20181129_28 to
           5.20190419.

       •   PerlIO::scalar has been upgraded from version 0.29 to 0.30.

       •   Storable has been upgraded from version 3.08 to 3.08_01.

Platform Support
   Platform-Specific Notes
       Windows
           The Windows Server 2003 SP1 Platform SDK build, with its early x64
           compiler and tools, was accidentally broken in Perl 5.27.9.  This has
           now been fixed.

       Mac OS X
           Perl's build and testing process on Mac OS X for "-Duseshrplib"
           builds is now compatible with Mac OS X System Integrity Protection
           (SIP).

           SIP prevents binaries in /bin (and a few other places) being passed
           the "DYLD_LIBRARY_PATH" environment variable.  For our purposes this
           prevents "DYLD_LIBRARY_PATH" from being passed to the shell, which
           prevents that variable being passed to the testing or build process,
           so running "perl" couldn't find libperl.dylib.

           To work around that, the initial build of the perl executable expects
           to find libperl.dylib in the build directory, and the library path is
           then adjusted during installation to point to the installed library.

           [perl #126706] <https://rt.perl.org/Ticket/Display.html?id=126706>

Selected Bug Fixes
       •   If an in-place edit is still in progress during global destruction
           and the process exit code (as stored in $?) is zero, perl will now
           treat the in-place edit as successful, replacing the input file with
           any output produced.

           This allows code like:

             perl -i -ne 'print "Foo"; last'

           to replace the input file, while code like:

             perl -i -ne 'print "Foo"; die'

           will not.  Partly resolves [perl #133659].

           [perl #133659] <https://rt.perl.org/Ticket/Display.html?id=133659>

       •   A regression in Perl 5.28 caused the following code to fail

            close(STDIN); open(CHILD, "|wc -l")'

           because the child's stdin would be closed on exec.  This has now been
           fixed.

       •   "pack "u", "invalid uuencoding"" now properly NUL terminates the
           zero-length SV produced.

           [perl #132655] <https://rt.perl.org/Ticket/Display.html?id=132655>

       •   Failing to compile a format now aborts compilation.  Like other
           errors in sub-parses this could leave the parser in a strange state,
           possibly crashing perl if compilation continued.

           [perl #132158] <https://rt.perl.org/Ticket/Display.html?id=132158>

       •   See "Any set of digits in the Common script are legal in a script run
           of another script".

Acknowledgements
       Perl 5.28.2 represents approximately 4 months of development since Perl
       5.28.1 and contains approximately 2,500 lines of changes across 75 files
       from 13 authors.

       Excluding auto-generated files, documentation and release tools, there
       were approximately 1,200 lines of changes to 29 .pm, .t, .c and .h files.

       Perl continues to flourish into its fourth decade thanks to a vibrant
       community of users and developers.  The following people are known to
       have contributed the improvements that became Perl 5.28.2:

       Aaron Crane, Abigail, Andy Dougherty, David Mitchell, Karen Etheridge,
       Karl Williamson, Leon Timmermans, Nicolas R., Sawyer X, Steve Hay, Tina
       Mueller, Tony Cook, Zak B. Elep.

       The list above is almost certainly incomplete as it is automatically
       generated from version control history.  In particular, it does not
       include the names of the (very much appreciated) contributors who
       reported issues to the Perl bug tracker.

       Many of the changes included in this version originated in the CPAN
       modules included in Perl's core.  We're grateful to the entire CPAN
       community for helping Perl to flourish.

       For a more complete list of all of Perl's historical contributors, please
       see the AUTHORS file in the Perl source distribution.

Reporting Bugs
       If you find what you think is a bug, you might check the perl bug
       database at <https://rt.perl.org/> .  There may also be information at
       <http://www.perl.org/> , the Perl Home Page.

       If you believe you have an unreported bug, please run the perlbug program
       included with your release.  Be sure to trim your bug down to a tiny but
       sufficient test case.  Your bug report, along with the output of "perl
       -V", will be sent off to perlbug@perl.org to be analysed by the Perl
       porting team.

       If the bug you are reporting has security implications which make it
       inappropriate to send to a publicly archived mailing list, then see
       "SECURITY VULNERABILITY CONTACT INFORMATION" in perlsec for details of
       how to report the issue.

Give Thanks
       If you wish to thank the Perl 5 Porters for the work we had done in Perl
       5, you can do so by running the "perlthanks" program:

           perlthanks

       This will send an email to the Perl 5 Porters list with your show of
       thanks.

SEE ALSO
       The Changes file for an explanation of how to view exhaustive details on
       what changed.

       The INSTALL file for how to build Perl.

       The README file for general stuff.

       The Artistic and Copying files for copyright information.



