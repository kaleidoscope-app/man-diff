PS(1)                        General Commands Manual                       PS(1)

NAME
     ps – process status

SYNOPSIS
     ps [-AaCcEefhjlMmrSTvwXx] [-O fmt | -o fmt] [-G gid[,gid...]]
        [-g grp[,grp...]] [-u uid[,uid...]] [-p pid[,pid...]] [-t tty[,tty...]]
        [-U user[,user...]]
     ps [-L]

DESCRIPTION
     The ps utility displays a header line, followed by lines containing
     information about all of your processes that have controlling terminals.

     A different set of processes can be selected for display by using any
     combination of the -a, -G, -g, -p, -T, -t, -U, and -u options.  If more
     than one of these options are given, then ps will select all processes
     which are matched by at least one of the given options.

     For the processes which have been selected for display, ps will usually
     display one line per process.  The -M option may result in multiple output
     lines (one line per thread) for some processes.  By default all of these
     output lines are sorted first by controlling terminal, then by process ID.
     The -m, -r, and -v options will change the sort order.  If more than one
     sorting option was given, then the selected processes will be sorted by the
     last sorting option which was specified.

     For the processes which have been selected for display, the information to
     display is selected based on a set of keywords (see the -L, -O, and -o
     options).  The default output format includes, for each process, the
     process' ID, controlling terminal, CPU time (including both user and system
     time), state, and associated command.

     The options are as follows:

     -A      Display information about other users' processes, including those
             without controlling terminals.

     -a      Display information about other users' processes as well as your
             own.  This will skip any processes which do not have a controlling
             terminal, unless the -x option is also specified.

     -C      Change the way the CPU percentage is calculated by using a “raw”
             CPU calculation that ignores “resident” time (this normally has no
             effect).

     -c      Change the “command” column output to just contain the executable
             name, rather than the full command line.

     -d      Like -A, but excludes session leaders.

     -E      Display the environment as well.  This does not reflect changes in
             the environment after process launch.

     -e      Identical to -A.

     -f      Display the uid, pid, parent pid, recent CPU usage, process start
             time, controlling tty, elapsed CPU usage, and the associated
             command.  If the -u option is also used, display the user name
             rather then the numeric uid.  When -o or -O is used to add to the
             display following -f, the command field is not truncated as
             severely as it is in other formats.

     -G      Display information about processes which are running with the
             specified real group IDs.

     -g      Display information about processes with the specified process
             group leaders.

     -h      Repeat the information header as often as necessary to guarantee
             one header per page of information.

     -j      Print information associated with the following keywords: user,
             pid, ppid, pgid, sess, jobc, state, tt, time, and command.

     -L      List the set of keywords available for the -O and -o options.

     -l      Display information associated with the following keywords: uid,
             pid, ppid, flags, cpu, pri, nice, vsz=SZ, rss, wchan, state=S,
             paddr=ADDR, tty, time, and command=CMD.

     -M      Print the threads corresponding to each task.

     -m      Sort by memory usage, instead of the combination of controlling
             terminal and process ID.

     -O      Add the information associated with the space or comma separated
             list of keywords specified, after the process ID, in the default
             information display.  Keywords may be appended with an equals (‘=’)
             sign and a string.  This causes the printed header to use the
             specified string instead of the standard header.

     -o      Display information associated with the space or comma separated
             list of keywords specified.  Multiple keywords may also be given in
             the form of more than one -o option.  Keywords may be appended with
             an equals (‘=’) sign and a string.  This causes the printed header
             to use the specified string instead of the standard header.  If all
             keywords have empty header texts, no header line is written.

     -p      Display information about processes which match the specified
             process IDs.

     -r      Sort by current CPU usage, instead of the combination of
             controlling terminal and process ID.

     -S      Change the way the process time is calculated by summing all exited
             children to their parent process.

     -T      Display information about processes attached to the device
             associated with the standard input.

     -t      Display information about processes attached to the specified
             terminal devices.

     -U      Display the processes belonging to the specified real user IDs.

     -u      Display the processes belonging to the specified usernames.

     -v      Display information associated with the following keywords: pid,
             state, time, sl, re, pagein, vsz, rss, lim, tsiz, %cpu, %mem, and
             command.  The -v option implies the -m option.

     -w      Use 132 columns to display information, instead of the default
             which is your window size.  If the -w option is specified more than
             once, ps will use as many columns as necessary without regard for
             your window size.  When output is not to a terminal, an unlimited
             number of columns are always used.

     -X      When displaying processes matched by other options, skip any
             processes which do not have a controlling terminal.

     -x      When displaying processes matched by other options, include
             processes which do not have a controlling terminal.  This is the
             opposite of the -X option.  If both -X and -x are specified in the
             same command, then ps will use the one which was specified last.

     A complete list of the available keywords is given below.  Some of these
     keywords are further specified as follows:

     %cpu      The CPU utilization of the process; this is a decaying average
               over up to a minute of previous (real) time.  Because the time
               base over which this is computed varies (some processes may be
               very young), it is possible for the sum of all %cpu fields to
               exceed 100%.

     %mem      The percentage of real memory used by this process.

     flags     The flags associated with the process as in the include file
               <sys/proc.h>:

               P_ADVLOCK           0x00001      Process may hold a POSIX
                                                advisory lock
               P_CONTROLT          0x00002      Has a controlling terminal
               P_LP64              0x00004      Process is LP64
               P_NOCLDSTOP         0x00008      No SIGCHLD when children stop
               P_PPWAIT            0x00010      Parent is waiting for child to
                                                exec/exit
               P_PROFIL            0x00020      Has started profiling
               P_SELECT            0x00040      Selecting; wakeup/waiting danger
               P_CONTINUED         0x00080      Process was stopped and
                                                continued
               P_SUGID             0x00100      Had set id privileges since last
                                                exec
               P_SYSTEM            0x00200      System proc: no sigs, stats or
                                                swapping
               P_TIMEOUT           0x00400      Timing out during sleep
               P_TRACED            0x00800      Debugged process being traced
               P_WAITED            0x01000      Debugging process has waited for
                                                child
               P_WEXIT             0x02000      Working on exiting
               P_EXEC              0x04000      Process called exec
               P_OWEUPC            0x08000      Owe process an addupc() call at
                                                next ast
               P_WAITING           0x40000      Process has a wait() in progress
               P_KDEBUG            0x80000        Kdebug tracing on for this
                                   process

     lim       The soft limit on memory used, specified via a call to
               setrlimit(2).

     lstart    The exact time the command started, using the ‘%c’ format
               described in strftime(3).

     nice      The process scheduling increment (see setpriority(2)).

     rss       the real memory (resident set) size of the process (in 1024 byte
               units).

     start     The time the command started.  If the command started less than
               24 hours ago, the start time is displayed using the “%l:ps.1p”
               format described in strftime(3).  If the command started less
               than 7 days ago, the start time is displayed using the “%a6.15p”
               format.  Otherwise, the start time is displayed using the
               “%e%b%y” format.

     state     The state is given by a sequence of characters, for example,
               “RWNA”.  The first character indicates the run state of the
               process:

               I       Marks a process that is idle (sleeping for longer than
                       about 20 seconds).
               R       Marks a runnable process.
               S       Marks a process that is sleeping for less than about 20
                       seconds.
               T       Marks a stopped process.
               U       Marks a process in uninterruptible wait.
               Z       Marks a dead process (a “zombie”).

               Additional characters after these, if any, indicate additional
               state information:

               +       The process is in the foreground process group of its
                       control terminal.
               <       The process has raised CPU scheduling priority.
               >       The process has specified a soft limit on memory
                       requirements and is currently exceeding that limit; such
                       a process is (necessarily) not swapped.
               A       the process has asked for random page replacement
                       (VA_ANOM, from vadvise(2), for example, lisp(1) in a
                       garbage collect).
               E       The process is trying to exit.
               L       The process has pages locked in core (for example, for
                       raw I/O).
               N       The process has reduced CPU scheduling priority (see
                       setpriority(2)).
               S       The process has asked for FIFO page replacement (VA_SEQL,
                       from vadvise(2), for example, a large image processing
                       program using virtual memory to sequentially address
                       voluminous data).
               s       The process is a session leader.
               V       The process is suspended during a vfork(2).
               W       The process is swapped out.
               X       The process is being traced or debugged.

     tt        An abbreviation for the pathname of the controlling terminal, if
               any.  The abbreviation consists of the three letters following
               /dev/tty, or, for the console, “con”.  This is followed by a ‘-’
               if the process can no longer reach that controlling terminal
               (i.e., it has been revoked).

     wchan     The event (an address in the system) on which a process waits.
               When printed numerically, the initial part of the address is
               trimmed off and the result is printed in hex, for example,
               0x80324000 prints as 324000.

     When printing using the command keyword, a process that has exited and has
     a parent that has not yet waited for the process (in other words, a zombie)
     is listed as “<defunct>”, and a process which is blocked while trying to
     exit is listed as “<exiting>”.  If the arguments cannot be located (usually
     because it has not been set, as is the case of system processes and/or
     kernel threads) the command name is printed within square brackets.  The
     process can change the arguments shown with setproctitle(3).  Otherwise, ps
     makes an educated guess as to the file name and arguments given when the
     process was created by examining memory or the swap area.  The method is
     inherently somewhat unreliable and in any event a process is entitled to
     destroy this information.  The ucomm (accounting) keyword can, however, be
     depended on.  If the arguments are unavailable or do not agree with the
     ucomm keyword, the value for the ucomm keyword is appended to the arguments
     in parentheses.

KEYWORDS
     The following is a complete list of the available keywords and their
     meanings.  Several of them have aliases (keywords which are synonyms).

     %cpu           percentage CPU usage (alias pcpu)
     %mem           percentage memory usage (alias pmem)
     acflag         accounting flag (alias acflg)
     args           command and arguments
     comm           command
     command        command and arguments
     cpu            short-term CPU usage factor (for scheduling)
     etime          elapsed running time
     flags          the process flags, in hexadecimal (alias f)
     gid            processes group id (alias group)
     inblk          total blocks read (alias inblock)
     jobc           job control count
     ktrace         tracing flags
     ktracep        tracing vnode
     lim            memoryuse limit
     logname        login name of user who started the session
     lstart         time started
     majflt         total page faults
     minflt         total page reclaims
     msgrcv         total messages received (reads from pipes/sockets)
     msgsnd         total messages sent (writes on pipes/sockets)
     nice           nice value (alias ni)
     nivcsw         total involuntary context switches
     nsigs          total signals taken (alias nsignals)
     nswap          total swaps in/out
     nvcsw          total voluntary context switches
     nwchan         wait channel (as an address)
     oublk          total blocks written (alias oublock)
     p_ru           resource usage (valid only for zombie)
     paddr          swap address
     pagein         pageins (same as majflt)
     pgid           process group number
     pid            process ID
     ppid           parent process ID
     pri            scheduling priority
     prsna          persona
     re             core residency time (in seconds; 127 = infinity)
     rgid           real group ID
     rss            resident set size
     ruid           real user ID
     ruser          user name (from ruid)
     sess           session ID
     sig            pending signals (alias pending)
     sigmask        blocked signals (alias blocked)
     sl             sleep time (in seconds; 127 = infinity)
     start          time started
     state          symbolic process state (alias stat)
     svgid          saved gid from a setgid executable
     svuid          saved UID from a setuid executable
     tdev           control terminal device number
     time           accumulated CPU time, user + system (alias cputime)
     tpgid          control terminal process group ID
     tsess          control terminal session ID
     tsiz           text size (in Kbytes)
     tt             control terminal name (two letter abbreviation)
     tty            full name of control terminal
     ucomm          name to be used for accounting
     uid            effective user ID
     upr            scheduling priority on return from system call (alias
                    usrpri)
     user           user name (from UID)
     utime          user CPU time (alias putime)
     vsz            virtual size in Kbytes (alias vsize)
     wchan          wait channel (as a symbolic name)
     wq             total number of workqueue threads
     wqb            number of blocked workqueue threads
     wqr            number of running workqueue threads
     wql            workqueue limit status (C = constrained thread limit, T =
                    total thread limit)
     xstat          exit or stop status (valid only for stopped or zombie
                    process)

ENVIRONMENT
     The following environment variables affect the execution of ps:

     COLUMNS      If set, specifies the user's preferred output width in column
                  positions.  By default, ps attempts to automatically determine
                  the terminal width.

FILES
     /dev                     special files and device names
     /var/run/dev.db          /dev name database
     /var/db/kvm_kernel.db    system namelist database

LEGACY DESCRIPTION
     In legacy mode, ps functions as described above, with the following
     differences:

     -e      Display the environment as well. Same as -E.

     -g      Ignored for compatibility. Takes no argument.

     -l      Display information associated with the following keywords: uid,
             pid, ppid, cpu, pri, nice, vsz, rss, wchan, state, tt, time, and
             command.

     -u      Display information associated with the following keywords: user,
             pid, %cpu, %mem, vsz, rss, tt, state, start, time, and command.
             The -u option implies the -r option.

     The biggest change is in the interpretation of the -u option, which now
     displays processes belonging to the specified username(s).  Thus, "ps -aux"
     will fail (unless you want to know about user "x").  As a convenience,
     however, "ps aux" still works as it did in Tiger.

     For more information about legacy mode, see compat(5).

SEE ALSO
     kill(1), w(1), kvm(3), strftime(3), sysctl(8)

STANDARDS
     The ps utility supports the Version 3 of the Single UNIX Specification
     (“SUSv3”) standard.

HISTORY
     The ps command appeared in Version 4 AT&T UNIX.

BUGS
     Since ps cannot run faster than the system and is run as any other
     scheduled process, the information it displays can never be exact.

     The ps utility does not correctly display argument lists containing
     multibyte characters.

