PERLMACOSX(1)           Perl Programmers Reference Guide           PERLMACOSX(1)




NAME
       perlmacosx - Perl under Mac OS X

SYNOPSIS
       This document briefly describes Perl under Mac OS X.

         curl -O http://www.cpan.org/src/perl-5.30.3.tar.gz
         tar -xzf perl-5.30.3.tar.gz
         cd perl-5.30.3
         ./Configure -des -Dprefix=/usr/local/
         make
         make test
         sudo make install

DESCRIPTION
       The latest Perl release (5.30.3 as of this writing) builds without
       changes under all versions of Mac OS X from 10.3 "Panther" onwards.

       In order to build your own version of Perl you will need 'make', which is
       part of Apple's developer tools - also known as Xcode. From Mac OS X 10.7
       "Lion" onwards, it can be downloaded separately as the 'Command Line
       Tools' bundle directly from <https://developer.apple.com/downloads/> (you
       will need a free account to log in), or as a part of the Xcode suite,
       freely available at the App Store. Xcode is a pretty big app, so unless
       you already have it or really want it, you are advised to get the
       'Command Line Tools' bundle separately from the link above. If you want
       to do it from within Xcode, go to Xcode -> Preferences -> Downloads and
       select the 'Command Line Tools' option.

       Between Mac OS X 10.3 "Panther" and 10.6 "Snow Leopard", the 'Command
       Line Tools' bundle was called 'unix tools', and was usually supplied with
       Mac OS install DVDs.

       Earlier Mac OS X releases (10.2 "Jaguar" and older) did not include a
       completely thread-safe libc, so threading is not fully supported. Also,
       earlier releases included a buggy libdb, so some of the DB_File tests are
       known to fail on those releases.

Customizations in Apple's Perl
       Several custom features have been added to the version of perl in Mac OS
       X.

   Module Search Path (@INC)
       Since 10.4 "Tiger", system administrators can easily add paths to perl's
       module search path.  The file '/Library/Perl/${version}/PrependToPath'
       contains paths (one per line) that will be added to the beginning of the
       search path, while the file '/Library/Perl/${version}/AppendToPath'
       contains paths that will be added to the end of the search path.

       By default, Mac OS X does not come with a PrependToPath file, but does
       come with an AppendToPath file.  This file contains the path
       '/System/Library/Perl/Extras/${version}', where third-party perl modules
       that Apple ships on Mac OS X, are installed.  In addition, it contains
       the paths to previous versions of '/Library/Perl/${version}' (where
       ${version} are the previous versions of perl that shipped in Mac OS X),
       to maintain backwards compatibility.

       In 10.5 "Leopard" and beyond, the environment variable
       NO_PERL_PREPENDTOPATH (set to anything) will cause perl to not load any
       PrependToPath file.  Likewise, the NO_PERL_APPENDTOPATH environment
       variable will case perl to not load any AppendToPath file.

       In 10.5.7 for versions of perl before 5.30.3, there is a new path,
       '/Library/Perl/Updates/${version}' that comes before the system perl
       directory.  When 'INSTALLDIRS=perl' is specified to Makefile.PL, modules
       that previous overwrite those in '/System/Library/Perl/${version}', will
       now be install in '/Library/Perl/Updates/${version}'.  This allows Apple
       to update modules in the system perl, but users will get the versions
       they installed in '/Library/Perl/Updates/${version}'.

       In addition, the Config parameters "installprivlib" and "installarchlib"
       now corresponds to this new directory.  There are also the new parameters
       "installupdateslib", "installupdatesarch", "updateslib" and
       "updatesarch", which also correspond to this new directory, and are
       provided for completeness.

       However, for perl 5.30.3 in Mac OS X 10.7, the order of the include paths
       was changed so that '/Library/Perl/5.30.3' came before
       '/System/Library/Perl/5.30.3', so '/Library/Perl/Updates' is no longer
       needed.  The Config parameters "installprivlib" and "installarchlib" have
       returned to their original values, and "installupdateslib",
       "installupdatesarch", "updateslib" and "updatesarch" have been removed.

   Dtrace Support
       Dtrace support has been added to perl to allow tracing of perl subroutine
       calls, both entry and return.  Here is a quick example:

           % cat test.pl
           #!/usr/bin/perl

           sub a {
               print "Ah! death. Welcome to thee brother\n";
           }

           sub b {
               print "Where art thou a()?\n";
               a();
           }

           sub c {
               print "The band of alphabets\n";
               b();
           }

           sub main {
               c();
           }

           main();
           % cat pltest.d
           perl$target:::
           {
               printf("%s\n", copyinstr(arg0));
           }
           % sudo dtrace -s pltest.d -c 'perl test.pl'
           dtrace: description 'perl$target::: ' matched 8 probes
           The band of alphabets
           Where art thou a()?
           Ah! death. Welcome to thee brother
           dtrace: pid 50272 has exited
           CPU     ID                    FUNCTION:NAME
             0  14231       Perl_pp_entersub:sub-entry main

             0  14231       Perl_pp_entersub:sub-entry c

             0  14231       Perl_pp_entersub:sub-entry b

             0  14231       Perl_pp_entersub:sub-entry a

             0  15806      Perl_pp_leavesub:sub-return a

             0  15806      Perl_pp_leavesub:sub-return b

             0  15806      Perl_pp_leavesub:sub-return c

             0  15806      Perl_pp_leavesub:sub-return main

   64-bit Support
       Since 10.5 "Leopard", Mac OS X provided both 32 and 64-bit support for
       libraries and frameworks, allowing both 32 and 64-bit applications to be
       written.  While running perl (and all other command-line programs)
       remained 32-bit, the 'libperl.dylib' library is 32/64 bits.  This allows
       programs with embedded perl support to run in both 32 and 64-bit mode as
       needed.

       To support this, changes to the Config module were made to return the
       correct values for the internal sizes of perl types.  For example,
       "longsize" return 4 in 32-bits, while it returns 8 in 64-bits.

       Related to this support is the new environment variable ARCHFLAGS, which
       provides a way to build extensions for different machine and 32/64-bit
       architectures.  The default architecture to build extensions before 10.5
       was the (single) architecture of the building machine.  In 10.5, this
       became building both 32-bit PowerPC and Intel.  In 10.6 and beyond, the
       default architectures were changed to building 32-bit for both PowerPC
       and Intel, and 64-bit only for Intel.  With ARCHFLAGS, this can be
       changed to whatever architectures the user wants to build.  For example:

           % env ARCHFLAGS='-arch i386 -arch x86_64' perl Makefile.PL
           % make
           % make install

       will build only 2-way universal.

   Multiple Version Support
       Since 10.6 "SnowLeopard", more than one version of perl are supported.
       So out of the box, the default version of perl is 5.30.  However, to
       provide backwards compatibility with previous versions of perl,
       especially for systems that have installed (version-specific) perl
       modules, or to provide newer versions of perl that we aren't ready to
       make the default, '/usr/bin/perl' can be switched to use an alternate
       version, on a per-user or system-wide basis.  The alternate version of
       perl that is provided is .

       Users can select the alternate version by simply running the following
       command:

           % defaults write com.apple.versioner.perl Version

       Subsequent invocations of '/usr/bin/perl' will then use the  version.

       To set defaults systemwide, use the above command, but replace the third
       argument with '/Library/Preferences/com.apple.versioner.perl' (admin
       privileges will be required).

       The environment variable VERSIONER_PERL_VERSION (set to one of the
       supported versions) can also be set, and it overrides the settings in any
       preference files.

       Note: this may changes in future versions of Mac OS X, which may use an
       improved scheme for making such settings.

Building Perl
   Installation Prefix
       The default installation location for this release uses the traditional
       UNIX directory layout under /usr/local. This is the recommended location
       for most users, and will leave the Apple-supplied Perl and its modules
       undisturbed.

       Using an installation prefix of '/usr' will result in a directory layout
       that mirrors that of Apple's default Perl, with core modules stored in
       '/System/Library/Perl/${version}', CPAN modules stored in
       '/Library/Perl/${version}', and the addition of
       '/Network/Library/Perl/${version}' to @INC for modules that are stored on
       a file server and used by many Macs.

   SDK support
       First, export the path to the SDK into the build environment:

        export SDK=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk

       Please make sure the SDK version (i.e. the numbers right before '.sdk')
       matches your system's (in this case, Mac OS X 10.8 "Mountain Lion"), as
       it is possible to have more than one SDK installed. Also make sure the
       path exists in your system, and if it doesn't please make sure the SDK is
       properly installed, as it should come with the 'Command Line Tools'
       bundle mentioned above. Finally, if you have an older Mac OS X (10.6
       "Snow Leopard" and below) running Xcode 4.2 or lower, the SDK path might
       be something like '/Developer/SDKs/MacOSX10.3.9.sdk'.

       You can use the SDK by exporting some additions to Perl's 'ccflags' and
       '..flags' config variables:

           ./Configure -Accflags="-nostdinc -B$SDK/usr/include/gcc \
                                  -B$SDK/usr/lib/gcc -isystem$SDK/usr/include \
                                  -F$SDK/System/Library/Frameworks" \
                       -Aldflags="-Wl,-syslibroot,$SDK" \
                       -de

   Universal Binary support
       Note: From Mac OS X 10.6 "Snow Leopard" onwards, Apple only supports
       Intel-based hardware. This means you can safely skip this section unless
       you have an older Apple computer running on ppc or wish to create a perl
       binary with backwards compatibility.

       You can compile perl as a universal binary (built for both ppc and
       intel).  In Mac OS X 10.4 "Tiger", you must export the 'u' variant of the
       SDK:

           export SDK=/Developer/SDKs/MacOSX10.4u.sdk

       Mac OS X 10.5 "Leopard" and above do not require the 'u' variant.

       In addition to the compiler flags used to select the SDK, also add the
       flags for creating a universal binary:

        ./Configure -Accflags="-arch i686 -arch ppc -nostdinc               \
                                -B$SDK/usr/include/gcc                      \
                               -B$SDK/usr/lib/gcc -isystem$SDK/usr/include  \
                               -F$SDK/System/Library/Frameworks"            \
                    -Aldflags="-arch i686 -arch ppc -Wl,-syslibroot,$SDK"   \
                    -de

       Keep in mind that these compiler and linker settings will also be used
       when building CPAN modules. For XS modules to be compiled as a universal
       binary, any libraries it links to must also be universal binaries. The
       system libraries that Apple includes with the 10.4u SDK are all
       universal, but user-installed libraries may need to be re-installed as
       universal binaries.

   64-bit Support
       Follow the instructions in INSTALL to build perl with support for 64-bit
       integers ("use64bitint") or both 64-bit integers and 64-bit addressing
       ("use64bitall"). In the latter case, the resulting binary will run only
       on G5-based hosts.

       Support for 64-bit addressing is experimental: some aspects of Perl may
       be omitted or buggy. Note the messages output by Configure for further
       information. Please use <https://github.com/Perl/perl5/issues> to submit
       a problem report in the event that you encounter difficulties.

       When building 64-bit modules, it is your responsibility to ensure that
       linked external libraries and frameworks provide 64-bit support: if they
       do not, module building may appear to succeed, but attempts to use the
       module will result in run-time dynamic linking errors, and subsequent
       test failures.  You can use "file" to discover the architectures
       supported by a library:

           $ file libgdbm.3.0.0.dylib
           libgdbm.3.0.0.dylib: Mach-O fat file with 2 architectures
           libgdbm.3.0.0.dylib (for architecture ppc):      Mach-O dynamically linked shared library ppc
           libgdbm.3.0.0.dylib (for architecture ppc64):    Mach-O 64-bit dynamically linked shared library ppc64

       Note that this issue precludes the building of many Macintosh-specific
       CPAN modules ("Mac::*"), as the required Apple frameworks do not provide
       64-bit support. Similarly, downloads from Fink or Darwinports are
       unlikely to provide 64-bit support; the libraries must be rebuilt from
       source with the appropriate compiler and linker flags. For further
       information, see Apple's 64-Bit Transition Guide at
       <http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html>.

   libperl and Prebinding
       Mac OS X ships with a dynamically-loaded libperl, but the default for
       this release is to compile a static libperl. The reason for this is pre-
       binding. Dynamic libraries can be pre-bound to a specific address in
       memory in order to decrease load time. To do this, one needs to be aware
       of the location and size of all previously-loaded libraries. Apple
       collects this information as part of their overall OS build process, and
       thus has easy access to it when building Perl, but ordinary users would
       need to go to a great deal of effort to obtain the information needed for
       pre-binding.

       You can override the default and build a shared libperl if you wish
       (Configure ... -Duseshrplib).

       With Mac OS X 10.4 "Tiger" and newer, there is almost no performance
       penalty for non-prebound libraries. Earlier releases will suffer a
       greater load time than either the static library, or Apple's pre-bound
       dynamic library.

   Updating Apple's Perl
       In a word - don't, at least not without a *very* good reason. Your
       scripts can just as easily begin with "#!/usr/local/bin/perl" as with
       "#!/usr/bin/perl". Scripts supplied by Apple and other third parties as
       part of installation packages and such have generally only been tested
       with the /usr/bin/perl that's installed by Apple.

       If you find that you do need to update the system Perl, one issue worth
       keeping in mind is the question of static vs. dynamic libraries. If you
       upgrade using the default static libperl, you will find that the dynamic
       libperl supplied by Apple will not be deleted. If both libraries are
       present when an application that links against libperl is built, ld will
       link against the dynamic library by default. So, if you need to replace
       Apple's dynamic libperl with a static libperl, you need to be sure to
       delete the older dynamic library after you've installed the update.

   Known problems
       If you have installed extra libraries such as GDBM through Fink (in other
       words, you have libraries under /sw/lib), or libdlcompat to
       /usr/local/lib, you may need to be extra careful when running Configure
       to not to confuse Configure and Perl about which libraries to use.  Being
       confused will show up for example as "dyld" errors about symbol problems,
       for example during "make test". The safest bet is to run Configure as

           Configure ... -Uloclibpth -Dlibpth=/usr/lib

       to make Configure look only into the system libraries.  If you have some
       extra library directories that you really want to use (such as newer
       Berkeley DB libraries in pre-Panther systems), add those to the libpth:

           Configure ... -Uloclibpth -Dlibpth='/usr/lib /opt/lib'

       The default of building Perl statically may cause problems with complex
       applications like Tk: in that case consider building shared Perl

           Configure ... -Duseshrplib

       but remember that there's a startup cost to pay in that case (see above
       "libperl and Prebinding").

       Starting with Tiger (Mac OS X 10.4), Apple shipped broken locale files
       for the eu_ES locale (Basque-Spain).  In previous releases of Perl, this
       resulted in failures in the lib/locale test. These failures have been
       suppressed in the current release of Perl by making the test ignore the
       broken locale.  If you need to use the eu_ES locale, you should contact
       Apple support.

   Cocoa
       There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge module,
       included with Mac OS X, can be used by standalone scripts to access
       Foundation (i.e. non-GUI) classes and objects.

       An alternative is CamelBones, a framework that allows access to both
       Foundation and AppKit classes and objects, so that full GUI applications
       can be built in Perl. CamelBones can be found on SourceForge, at
       <http://www.sourceforge.net/projects/camelbones/>.

Starting From Scratch
       Unfortunately it is not that difficult somehow manage to break one's Mac
       OS X Perl rather severely.  If all else fails and you want to really,
       REALLY, start from scratch and remove even your Apple Perl installation
       (which has become corrupted somehow), the following instructions should
       do it.  Please think twice before following these instructions: they are
       much like conducting brain surgery to yourself.  Without anesthesia.  We
       will not come to fix your system if you do this.

       First, get rid of the libperl.dylib:

           # cd /System/Library/Perl/darwin/CORE
           # rm libperl.dylib

       Then delete every .bundle file found anywhere in the folders:

           /System/Library/Perl
           /Library/Perl

       You can find them for example by

           # find /System/Library/Perl /Library/Perl -name '*.bundle' -print

       After this you can either copy Perl from your operating system media (you
       will need at least the /System/Library/Perl and /usr/bin/perl), or
       rebuild Perl from the source code with "Configure -Dprefix=/usr
       -Duseshrplib" NOTE: the "-Dprefix=/usr" to replace the system Perl works
       much better with Perl 5.8.1 and later, in Perl 5.8.0 the settings were
       not quite right.

       "Pacifist" from CharlesSoft (<http://www.charlessoft.com/>) is a nice way
       to extract the Perl binaries from the OS media, without having to
       reinstall the entire OS.

AUTHOR
       This README was written by Sherm Pendley <sherm@dot-app.org>, and
       subsequently updated by Dominic Dunlop <domo@computer.org> and Breno G.
       de Oliveira <garu@cpan.org>. The "Starting From Scratch" recipe was
       contributed by John Montbriand <montbriand@apple.com>.

DATE
       Last modified 2011-10-31.



