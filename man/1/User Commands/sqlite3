SQLITE3(1)                   General Commands Manual                  SQLITE3(1)



NAME
       sqlite3 - A command line interface for SQLite version 3


SYNOPSIS
       sqlite3 [options] [databasefile] [SQL]


SUMMARY
       sqlite3 is a terminal-based front-end to the SQLite library that can
       evaluate queries interactively and display the results in multiple
       formats.  sqlite3 can also be used within shell scripts and other
       applications to provide batch processing features.


DESCRIPTION
       To start a sqlite3 interactive session, invoke the sqlite3 command and
       optionally provide the name of a database file.  If the database file
       does not exist, it will be created.  If the database file does exist, it
       will be opened.

       For example, to create a new database file named "mydata.db", create a
       table named "memos" and insert a couple of records into that table:

       $ sqlite3 mydata.db
       SQLite version 3.36.0 2021-06-18 18:58:49
       Enter ".help" for usage hints.
       sqlite> CREATE TABLE memos(text, priority INTEGER);
       sqlite> INSERT INTO memos VALUES('deliver project description', 10);
       sqlite> INSERT INTO memos VALUES('lunch with Christine', 100);
       sqlite> SELECT * FROM memos;
       deliver project description|10
       lunch with Christine|100
       sqlite>


       If no database name is supplied, the ATTACH sql command can be used to
       attach to existing or create new database files.  ATTACH can also be used
       to attach to multiple databases within the same interactive session.
       This is useful for migrating data between databases, possibly changing
       the schema along the way.

       Optionally, a SQL statement or set of SQL statements can be supplied as a
       single argument.  Multiple statements should be separated by semi-colons.

       For example:

       $ sqlite3 -line mydata.db 'SELECT * FROM memos WHERE priority > 20;'
           text = lunch with Christine
       priority = 100



   SQLITE META-COMMANDS
       The interactive interpreter offers a set of meta-commands that can be
       used to control the output format, examine the currently attached
       database files, or perform administrative operations upon the attached
       databases (such as rebuilding indices).   Meta-commands are always
       prefixed with a dot (.).

       A list of available meta-commands can be viewed at any time by issuing
       the '.help' command.  For example:

       sqlite> .help
       .auth ON|OFF             Show authorizer callbacks
       .backup ?DB? FILE        Backup DB (default "main") to FILE
       .bail on|off             Stop after hitting an error.  Default OFF
       .binary on|off           Turn binary output on or off.  Default OFF
       .cd DIRECTORY            Change the working directory to DIRECTORY
       .changes on|off          Show number of rows changed by SQL
       .check GLOB              Fail if output since .testcase does not match
       .clone NEWDB             Clone data into NEWDB from the existing database
       .databases               List names and files of attached databases
       .dbconfig ?op? ?val?     List or change sqlite3_db_config() options
       .dbinfo ?DB?             Show status information about the database
       .dump ?OBJECTS?          Render database content as SQL
       .echo on|off             Turn command echo on or off
       .eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN
       .excel                   Display the output of next command in spreadsheet
       .exit ?CODE?             Exit this program with return-code CODE
       .expert                  EXPERIMENTAL. Suggest indexes for queries
       .explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto
       .filectrl CMD ...        Run various sqlite3_file_control() operations
       .fullschema ?--indent?   Show schema and the content of sqlite_stat tables
       .headers on|off          Turn display of headers on or off
       .help ?-all? ?PATTERN?   Show help text for PATTERN
       .import FILE TABLE       Import data from FILE into TABLE
       .imposter INDEX TABLE    Create imposter table TABLE on index INDEX
       .indexes ?TABLE?         Show names of indexes
       .limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT
       .lint OPTIONS            Report potential schema issues.
       .log FILE|off            Turn logging on or off.  FILE can be stderr/stdout
       .mode MODE ?TABLE?       Set output mode
       .nullvalue STRING        Use STRING in place of NULL values
       .once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE
       .oom ?--repeat M? ?N?    Simulate an OOM error on the N-th allocation
       .open ?OPTIONS? ?FILE?   Close existing database and reopen FILE
       .output ?FILE?           Send output to FILE or stdout if FILE is omitted
       .parameter CMD ...       Manage SQL parameter bindings
       .print STRING...         Print literal STRING
       .progress N              Invoke progress handler after every N opcodes
       .prompt MAIN CONTINUE    Replace the standard prompts
       .quit                    Exit this program
       .read FILE               Read input from FILE
       .recover                 Recover as much data as possible from corrupt db.
       .restore ?DB? FILE       Restore content of DB (default "main") from FILE
       .save FILE               Write in-memory database into FILE
       .scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off
       .schema ?PATTERN?        Show the CREATE statements matching PATTERN
       .selftest ?OPTIONS?      Run tests defined in the SELFTEST table
       .separator COL ?ROW?     Change the column and row separators
       .session ?NAME? CMD ...  Create or control sessions
       .sha3sum ...             Compute a SHA3 hash of database content
       .shell CMD ARGS...       Run CMD ARGS... in a system shell
       .show                    Show the current values for various settings
       .stats ?ARG?             Show stats or turn stats on or off
       .system CMD ARGS...      Run CMD ARGS... in a system shell
       .tables ?TABLE?          List names of tables matching LIKE pattern TABLE
       .testcase NAME           Begin redirecting output to 'testcase-out.txt'
       .testctrl CMD ...        Run various sqlite3_test_control() operations
       .timeout MS              Try opening locked tables for MS milliseconds
       .timer on|off            Turn SQL timer on or off
       .trace ?OPTIONS?         Output each SQL statement as it is run
       .unmodule NAME ...       Unregister virtual table modules
       .vfsinfo ?AUX?           Information about the top-level VFS
       .vfslist                 List all available VFSes
       .vfsname ?AUX?           Print the name of the VFS stack
       .width NUM1 NUM2 ...     Set minimum column widths for columnar output
       sqlite>


OPTIONS
       sqlite3 has the following options:

       -append
              Append the database to the end of the file.

       -ascii Set output mode to 'ascii'.

       -bail  Stop after hitting an error.

       -batch Force batch I/O.

       -column
              Query results will be displayed in a table like form, using
              whitespace characters to separate the columns and align the
              output.

       -cmd command
              run command before reading stdin

       -csv   Set output mode to CSV (comma separated values).

       -deserialize
              Open the database using sqlite3_deserialize()

       -echo  Print commands before execution.

       -init file
              Read and execute commands from file , which can contain a mix of
              SQL statements and meta-commands.

       -[no]header
              Turn headers on or off.

       -help  Show help on options and exit.

       -html  Query results will be output as simple HTML tables.

       -interactive
              Force interactive I/O.

       -line  Query results will be displayed with one value per line, rows
              separated by a blank line.  Designed to be easily parsed by
              scripts or other programs

       -list  Query results will be displayed with the separator (|, by default)
              character between each field value.  The default.

       -lookaside size n
              Use n entries of size bytes for lookaside memory

       -maxsize N
              Limits size of a -deserialize database to N bytes

       -mmap N
              Set default mmap size to N

       -memtrace
              Trace all memory allocations.

       -newline sep
              Set output row separator. Default is '0.

       -nofollow
              Refuse to open symbolic links to database files.

       -nullvalue string
              Set string used to represent NULL values.  Default is '' (empty
              string).

       -quote Set output mode to quote.

       -readonly
              Open the database read-only.

       -separator separator
              Set output field separator.  Default is '|'.

       -stats Print memory stats before each finalize.

       -version
              Show SQLite version.

       -vfs name
              Use name as the default VFS.



INIT FILE
       sqlite3 reads an initialization file to set the configuration of the
       interactive environment.  Throughout initialization, any previously
       specified setting can be overridden.  The sequence of initialization is
       as follows:

       o The default configuration is established as follows:


       mode            = LIST
       separator       = "|"
       main prompt     = "sqlite> "
       continue prompt = "   ...> "


       o If the file ~/.sqliterc exists, it is processed first.  It should
       generally only contain meta-commands.

       o If the -init option is present, the specified file is processed.

       o All other command line options are processed.


SEE ALSO
       http://www.sqlite.org/cli.html
       The sqlite3-doc package.

AUTHOR
       This manual page was originally written by Andreas Rottmann
       <rotty@debian.org>, for the Debian GNU/Linux system (but may be used by
       others). It was subsequently revised by Bill Bumgarner <bbum@mac.com>,
       Laszlo Boszormenyi <gcs@debian.hu>, and Scott Perry <sqlite@numist.net>.



