UNIX(4)                       Device Drivers Manual                      UNIX(4)

NAME
     unix – UNIX-domain protocol family

SYNOPSIS
     #include <sys/types.h>
     #include <sys/un.h>

DESCRIPTION
     The UNIX-domain protocol family is a collection of protocols that provides
     local (on-machine) interprocess communication through the normal socket(2)
     mechanisms.  The UNIX-domain family supports the SOCK_STREAM and SOCK_DGRAM
     socket types and uses filesystem pathnames for addressing.

ADDRESSING
     UNIX-domain addresses are variable-length filesystem pathnames of at most
     104 characters.  The include file ⟨sys/un.h⟩ defines this address:

           struct sockaddr_un {
                   u_char  sun_len;
                   u_char  sun_family;
                   char    sun_path[104];
           };

     Binding a name to a UNIX-domain socket with bind(2) causes a socket file to
     be created in the filesystem.  This file is not removed when the socket is
     closed—unlink(2) must be used to remove the file.

     The UNIX-domain protocol family does not support broadcast addressing or
     any form of “wildcard” matching on incoming messages.  All addresses are
     absolute- or relative-pathnames of other UNIX-domain sockets.  Normal
     filesystem access-control mechanisms are also applied when referencing
     pathnames; e.g., the destination of a connect(2) or sendto(2) must be
     writable.

PROTOCOLS
     The UNIX-domain protocol family is comprised of simple transport protocols
     that support the SOCK_STREAM and SOCK_DGRAM abstractions.  SOCK_STREAM
     sockets also support the communication of UNIX file descriptors through the
     use of the msg_control field in the msg argument to sendmsg(2) and
     recvmsg(2).

     Any valid descriptor may be sent in a message.  The file descriptor(s) to
     be passed are described using a struct cmsghdr that is defined in the
     include file ⟨sys/socket.h⟩.  The type of the message is SCM_RIGHTS, and
     the data portion of the messages is an array of integers representing the
     file descriptors to be passed.  The number of descriptors being passed is
     defined by the length field of the message; the length field is the sum of
     the size of the header plus the size of the array of file descriptors.

     The received descriptor is a duplicate of the sender's descriptor, as if it
     were created with a call to dup(2).  Per-process descriptor flags, set with
     fcntl(2), are not passed to a receiver.  Descriptors that are awaiting
     delivery, or that are purposely not received, are automatically closed by
     the system when the destination socket is closed.

     The effective credentials (i.e., the user ID and group list) the of a peer
     on a SOCK_STREAM socket may be obtained using the LOCAL_PEERCRED socket
     option.  This may be used by a server to obtain and verify the credentials
     of its client, and vice versa by the client to verify the credentials of
     the server.  These will arrive in the form of a filled in struct xucred
     (defined in sys/ucred.h).  The credentials presented to the server (the
     listen(2) caller) are those of the client when it called connect(2); the
     credentials presented to the client (the connect(2) caller) are those of
     the server when it called listen(2).  This mechanism is reliable; there is
     no way for either party to influence the credentials presented to its peer
     except by calling the appropriate system call (e.g., connect(2) or
     listen(2)) under different effective credentials.

SEE ALSO
     socket(2), intro(4)

     “An Introductory 4.3 BSD Interprocess Communication Tutorial”, PS1, 7.

     “An Advanced 4.3 BSD Interprocess Communication Tutorial”, PS1, 8.

