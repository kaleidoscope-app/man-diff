pt_export_api(i)                  Parser Tools                  pt_export_api(i)



________________________________________________________________________________

NAME
       pt_export_api - Parser Tools Export API

SYNOPSIS
       package require Tcl  8.5

       CONVERTER reset

       CONVERTER configure

       CONVERTER configure option

       CONVERTER configure option value...

       CONVERTER convert serial

       ::export serial configuration

________________________________________________________________________________

DESCRIPTION
       Are you lost ?  Do you have trouble understanding this document ?  In
       that case please read the overview provided by the Introduction to Parser
       Tools. This document is the entrypoint to the whole system the current
       package is a part of.

       This document describes two APIs. First the API shared by all packages
       for the conversion of Parsing Expression Grammars into some other format,
       and then the API shared by the packages which implement the export
       plugins sitting on top of the conversion packages.

       Its intended audience are people who wish to create their own converter
       for some type of output, and/or an export plugin for their or some other
       converter.

       It resides in the Export section of the Core Layer of Parser Tools.

       IMAGE: arch_core_export

CONVERTER API
       Any (grammar) export converter has to follow the rules set out below:

       [1]    A converter is a package. Its name is arbitrary, however it is
              recommended to put it under the ::pt::peg::to namespace.

       [2]    The package provides either a single Tcl command following the API
              outlined below, or a class command whose instances follow the same
              API. The commands which follow the API are called converter
              commands.

       [3]    A converter command has to provide the following three methods
              with the given signatures and semantics. Converter commands are
              allowed to provide more methods of their own, but not less, and
              they may not provide different semantics for the standardized
              methods.

              CONVERTER reset
                     This method has to reset the configuration of the converter
                     to its default settings. The result of the method has to be
                     the empty string.

              CONVERTER configure
                     This method, in this form, has to return a dictionary
                     containing the current configuration of the converter.

              CONVERTER configure option
                     This method, in this form, has to return the current value
                     of the specified configuration option of the converter.

                     Please read the section Options for the set of standard
                     options any converter has to accept.  Any other options
                     accepted by a specific converter will be described in its
                     manpage.

              CONVERTER configure option value...
                     This command, in this form, sets the specified options of
                     the converter to the given values.

                     Please read the section Options for the set of standard
                     options a converter has to accept.  Any other options
                     accepted by a specific converter will be described in its
                     manpage.

              CONVERTER convert serial
                     This method has to accept the canonical serialization of a
                     parsing expression grammar, as specified in section PEG
                     serialization format, and contained in serial.  The result
                     of the method has to be the result of converting the input
                     grammar into whatever the converter is for, per its
                     configuration.

PLUGIN API
       Any (grammar) export plugin has to follow the rules set out below:

       [1]    A plugin is a package.

       [2]    The name of a plugin package has the form pt::peg::export::FOO,
              where FOO is the name of the format the plugin will generate
              output for.

       [3]    The plugin can expect that the package pt::peg::export::plugin is
              present, as indicator that it was invoked from a genuine plugin
              manager.

              It is recommended that a plugin does check for the presence of
              this package.

       [4]    A plugin has to provide a single command, in the global namespace,
              with the signature shown below. Plugins are allowed to provide
              more command of their own, but not less, and they may not provide
              different semantics for the standardized command.

              ::export serial configuration
                     This command has to accept the canonical serialization of a
                     parsing expression grammar and the configuration for the
                     converter invoked by the plugin. The result of the command
                     has to be the result of the converter invoked by the plugin
                     for th input grammar and configuration.

                     string serial
                            This argument will contain the canonical
                            serialization of the parsing expression grammar for
                            which to generate the output.  The specification of
                            what a canonical serialization is can be found in
                            the section PEG serialization format.

                     dictionary configuration
                            This argument will contain the configuration to
                            configure the converter with before invoking it, as
                            a dictionary mapping from options to values.

                            Please read the section Options for the set of
                            standard options any converter has to accept, and
                            thus any plugin as well.  Any other options accepted
                            by a specific plugin will be described in its
                            manpage.

       [5]    A single usage cycle of a plugin consists of an invokation of the
              command export. This call has to leave the plugin in a state where
              another usage cycle can be run without problems.

OPTIONS
       Each export converter and plugin for an export converter has to accept
       the options below in their configure method. Converters are allowed to
       ignore the contents of these options when performing a conversion, but
       they must not reject them. Plugins are expected to pass the options given
       to them to the converter they are invoking.

       -file string
              The value of this option is the name of the file or other entity
              from which the grammar came, for which the command is run. The
              default value is unknown.

       -name string
              The value of this option is the name of the grammar we are
              processing.  The default value is a_pe_grammar.

       -user string
              The value of this option is the name of the user for which the
              command is run. The default value is unknown.

USAGE
       To use a converter do

           # Get the converter (single command here, not class)
           package require the-converter-package

           # Provide a configuration
           theconverter configure ...

           # Perform the conversion
           set result [theconverter convert $thegrammarserial]

           ... process the result ...

       To use a plugin FOO do

           # Get an export plugin manager
           package require pt::peg::export
           pt::peg::export E

           # Provide a configuration
           E configuration set ...

           # Run the plugin, and the converter inside.
           set result [E export serial $grammarserial FOO]

           ... process the result ...


PEG SERIALIZATION FORMAT
       Here we specify the format used by the Parser Tools to serialize Parsing
       Expression Grammars as immutable values for transport, comparison, etc.

       We distinguish between regular and canonical serializations.  While a PEG
       may have more than one regular serialization only exactly one of them
       will be canonical.

       regular serialization

              [1]    The serialization of any PEG is a nested Tcl dictionary.

              [2]    This dictionary holds a single key, pt::grammar::peg, and
                     its value. This value holds the contents of the grammar.

              [3]    The contents of the grammar are a Tcl dictionary holding
                     the set of nonterminal symbols and the starting expression.
                     The relevant keys and their values are

                     rules  The value is a Tcl dictionary whose keys are the
                            names of the nonterminal symbols known to the
                            grammar.

                            [1]    Each nonterminal symbol may occur only once.

                            [2]    The empty string is not a legal nonterminal
                                   symbol.

                            [3]    The value for each symbol is a Tcl dictionary
                                   itself. The relevant keys and their values in
                                   this dictionary are

                                   is     The value is the serialization of the
                                          parsing expression describing the
                                          symbols sentennial structure, as
                                          specified in the section PE
                                          serialization format.

                                   mode   The value can be one of three values
                                          specifying how a parser should handle
                                          the semantic value produced by the
                                          symbol.

                                          value  The semantic value of the
                                                 nonterminal symbol is an
                                                 abstract syntax tree consisting
                                                 of a single node node for the
                                                 nonterminal itself, which has
                                                 the ASTs of the symbol's right
                                                 hand side as its children.

                                          leaf   The semantic value of the
                                                 nonterminal symbol is an
                                                 abstract syntax tree consisting
                                                 of a single node node for the
                                                 nonterminal, without any
                                                 children. Any ASTs generated by
                                                 the symbol's right hand side
                                                 are discarded.

                                          void   The nonterminal has no semantic
                                                 value. Any ASTs generated by
                                                 the symbol's right hand side
                                                 are discarded (as well).

                     start  The value is the serialization of the start parsing
                            expression of the grammar, as specified in the
                            section PE serialization format.

              [4]    The terminal symbols of the grammar are specified
                     implicitly as the set of all terminal symbols used in the
                     start expression and on the RHS of the grammar rules.

       canonical serialization
              The canonical serialization of a grammar has the format as
              specified in the previous item, and then additionally satisfies
              the constraints below, which make it unique among all the possible
              serializations of this grammar.

              [1]    The keys found in all the nested Tcl dictionaries are
                     sorted in ascending dictionary order, as generated by Tcl's
                     builtin command lsort -increasing -dict.

              [2]    The string representation of the value is the canonical
                     representation of a Tcl dictionary. I.e. it does not
                     contain superfluous whitespace.

   EXAMPLE
       Assuming the following PEG for simple mathematical expressions


       PEG calculator (Expression)
           Digit      <- '0'/'1'/'2'/'3'/'4'/'5'/'6'/'7'/'8'/'9'   ;
           Sign       <- '-' / '+'                       ;
           Number     <- Sign? Digit+                         ;
           Expression <- '(' Expression ')' / (Factor (MulOp Factor)*)  ;
           MulOp      <- '*' / '/'                       ;
           Factor     <- Term (AddOp Term)*                   ;
           AddOp      <- '+'/'-'                         ;
           Term       <- Number                     ;
       END;


       then its canonical serialization (except for whitespace) is


       pt::grammar::peg {
           rules {
            AddOp      {is {/ {t -} {t +}}                                                                mode value}
            Digit      {is {/ {t 0} {t 1} {t 2} {t 3} {t 4} {t 5} {t 6} {t 7} {t 8} {t 9}}                mode value}
            Expression {is {/ {x {t (} {n Expression} {t )}} {x {n Factor} {* {x {n MulOp} {n Factor}}}}} mode value}
            Factor     {is {x {n Term} {* {x {n AddOp} {n Term}}}}                                        mode value}
            MulOp      {is {/ {t *} {t /}}                                                                mode value}
            Number     {is {x {? {n Sign}} {+ {n Digit}}}                                                 mode value}
            Sign       {is {/ {t -} {t +}}                                                                mode value}
            Term       {is  {n Number}                                                                    mode value}
           }
           start {n Expression}
       }


PE SERIALIZATION FORMAT
       Here we specify the format used by the Parser Tools to serialize Parsing
       Expressions as immutable values for transport, comparison, etc.

       We distinguish between regular and canonical serializations.  While a
       parsing expression may have more than one regular serialization only
       exactly one of them will be canonical.

       Regular serialization

              Atomic Parsing Expressions

                     [1]    The string epsilon is an atomic parsing expression.
                            It matches the empty string.

                     [2]    The string dot is an atomic parsing expression. It
                            matches any character.

                     [3]    The string alnum is an atomic parsing expression. It
                            matches any Unicode alphabet or digit character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [4]    The string alpha is an atomic parsing expression. It
                            matches any Unicode alphabet character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [5]    The string ascii is an atomic parsing expression. It
                            matches any Unicode character below U0080. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [6]    The string control is an atomic parsing expression.
                            It matches any Unicode control character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [7]    The string digit is an atomic parsing expression. It
                            matches any Unicode digit character. Note that this
                            includes characters outside of the [0..9] range.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [8]    The string graph is an atomic parsing expression. It
                            matches any Unicode printing character, except for
                            space. This is a custom extension of PEs based on
                            Tcl's builtin command string is.

                     [9]    The string lower is an atomic parsing expression. It
                            matches any Unicode lower-case alphabet character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [10]   The string print is an atomic parsing expression. It
                            matches any Unicode printing character, including
                            space. This is a custom extension of PEs based on
                            Tcl's builtin command string is.

                     [11]   The string punct is an atomic parsing expression. It
                            matches any Unicode punctuation character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [12]   The string space is an atomic parsing expression. It
                            matches any Unicode space character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [13]   The string upper is an atomic parsing expression. It
                            matches any Unicode upper-case alphabet character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [14]   The string wordchar is an atomic parsing expression.
                            It matches any Unicode word character. This is any
                            alphanumeric character (see alnum), and any
                            connector punctuation characters (e.g.  underscore).
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [15]   The string xdigit is an atomic parsing expression.
                            It matches any hexadecimal digit character. This is
                            a custom extension of PEs based on Tcl's builtin
                            command string is.

                     [16]   The string ddigit is an atomic parsing expression.
                            It matches any decimal digit character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command regexp.

                     [17]   The expression [list t x] is an atomic parsing
                            expression. It matches the terminal string x.

                     [18]   The expression [list n A] is an atomic parsing
                            expression. It matches the nonterminal A.

              Combined Parsing Expressions

                     [1]    For parsing expressions e1, e2, ... the result of
                            [list / e1 e2 ... ] is a parsing expression as well.
                            This is the ordered choice, aka prioritized choice.

                     [2]    For parsing expressions e1, e2, ... the result of
                            [list x e1 e2 ... ] is a parsing expression as well.
                            This is the sequence.

                     [3]    For a parsing expression e the result of [list * e]
                            is a parsing expression as well.  This is the kleene
                            closure, describing zero or more repetitions.

                     [4]    For a parsing expression e the result of [list + e]
                            is a parsing expression as well.  This is the
                            positive kleene closure, describing one or more
                            repetitions.

                     [5]    For a parsing expression e the result of [list & e]
                            is a parsing expression as well.  This is the and
                            lookahead predicate.

                     [6]    For a parsing expression e the result of [list ! e]
                            is a parsing expression as well.  This is the not
                            lookahead predicate.

                     [7]    For a parsing expression e the result of [list ? e]
                            is a parsing expression as well.  This is the
                            optional input.

       Canonical serialization
              The canonical serialization of a parsing expression has the format
              as specified in the previous item, and then additionally satisfies
              the constraints below, which make it unique among all the possible
              serializations of this parsing expression.

              [1]    The string representation of the value is the canonical
                     representation of a pure Tcl list. I.e. it does not contain
                     superfluous whitespace.

              [2]    Terminals are not encoded as ranges (where start and end of
                     the range are identical).

   EXAMPLE
       Assuming the parsing expression shown on the right-hand side of the rule


           Expression <- '(' Expression ')'
                       / Factor (MulOp Factor)*


       then its canonical serialization (except for whitespace) is


           {/ {x {t (} {n Expression} {t )}} {x {n Factor} {* {x {n MulOp} {n Factor}}}}}


BUGS, IDEAS, FEEDBACK
       This document, and the package it describes, will undoubtedly contain
       bugs and other problems.  Please report such in the category pt of the
       Tcllib SF Trackers [http://sourceforge.net/tracker/?group_id=12883].
       Please also report any ideas for enhancements you may have for either
       package and/or documentation.

KEYWORDS
       EBNF, LL(k), PEG, TDPL, context-free languages, expression, grammar,
       matching, parser, parsing expression, parsing expression grammar, push
       down automaton, recursive descent, state, top-down parsing languages,
       transducer

CATEGORY
       Parsing and Grammars

COPYRIGHT
       Copyright (c) 2009 Andreas Kupries <andreas_kupries@users.sourceforge.net>




