pt::peg::to::tclparam(n)          Parser Tools          pt::peg::to::tclparam(n)



________________________________________________________________________________

NAME
       pt::peg::to::tclparam - PEG Conversion. Write TCLPARAM format

SYNOPSIS
       package require Tcl  8.5

       package require pt::peg::to::tclparam  ?1?

       pt::peg::to::tclparam reset

       pt::peg::to::tclparam configure

       pt::peg::to::tclparam configure option

       pt::peg::to::tclparam configure option value...

       pt::peg::to::tclparam convert serial

________________________________________________________________________________

DESCRIPTION
       Are you lost ?  Do you have trouble understanding this document ?  In
       that case please read the overview provided by the Introduction to Parser
       Tools. This document is the entrypoint to the whole system the current
       package is a part of.

       This package implements the converter from parsing expression grammars to
       TCLPARAM markup.

       It resides in the Export section of the Core Layer of Parser Tools, and
       can be used either directly with the other packages of this layer, or
       indirectly through the export manager provided by pt::peg::export. The
       latter is intented for use in untrusted environments and done through the
       corresponding export plugin pt::peg::export::tclparam sitting between
       converter and export manager.

       IMAGE: arch_core_eplugins

API
       The API provided by this package satisfies the specification of the
       Converter API found in the Parser Tools Export API specification.

       pt::peg::to::tclparam reset
              This command resets the configuration of the package to its
              default settings.

       pt::peg::to::tclparam configure
              This command returns a dictionary containing the current
              configuration of the package.

       pt::peg::to::tclparam configure option
              This command returns the current value of the specified
              configuration option of the package. For the set of legal options,
              please read the section Options.

       pt::peg::to::tclparam configure option value...
              This command sets the given configuration options of the package,
              to the specified values. For the set of legal options, please read
              the section Options.

       pt::peg::to::tclparam convert serial
              This command takes the canonical serialization of a parsing
              expression grammar, as specified in section PEG serialization
              format, and contained in serial, and generates TCLPARAM markup
              encoding the grammar, per the current package configuration.  The
              created string is then returned as the result of the command.

OPTIONS
       The converter to Tcl/PARAM markup recognizes the following configuration
       variables and changes its behaviour as they specify.

       -template string
              The value of this configuration variable is a string into which to
              put the generated text and the other configuration settings. The
              various locations for user-data are expected to be specified with
              the placeholders listed below. The default value is "@code@".

              @user@ To be replaced with the value of the configuration variable
                     -user.

              @format@
                     To be replaced with the the constant Tcl/PARAM.

              @file@ To be replaced with the value of the configuration variable
                     -file.

              @name@ To be replaced with the value of the configuration variable
                     -name.

              @code@ To be replaced with the generated Tcl code.
       The following configuration variables are special, in that they will
       occur within the generated code, and are replaced there as well.

              @runtime@
                     To be replaced with the value of the configuration variable
                     runtime-command.

              @self@ To be replaced with the value of the configuration variable
                     self-command.

              @def@  To be replaced with the value of the configuration variable
                     proc-command.

              @ns@   To be replaced with the value of the configuration variable
                     namespace.

              @main@ To be replaced with the value of the configuration variable
                     main.

              @prelude@
                     To be replaced with the value of the configuration variable
                     prelude.

       -name string
              The value of this configuration variable is the name of the
              grammar for which the conversion is run. The default value is
              a_pe_grammar.

       -user string
              The value of this configuration variable is the name of the user
              for which the conversion is run. The default value is unknown.

       -file string
              The value of this configuration variable is the name of the file
              or other entity from which the grammar came, for which the
              conversion is run. The default value is unknown.

       -runtime-command string
              A Tcl string representing the Tcl command or reference to it used
              to call PARAM instruction from parser procedures, per the chosen
              framework (template).  The default value is the empty string.

       -self-command string
              A Tcl string representing the Tcl command or reference to it used
              to call the parser procedures (methods ...) from another parser
              procedure, per the chosen framework (template).  The default value
              is the empty string.

       -proc-command string
              The name of the Tcl command used to define procedures (methods
              ...), per the chosen framework (template).  The default value is
              proc.

       -namespace string
              The name of the namespace the parser procedures (methods, ...)
              shall reside in, including the trailing '::' needed to separate it
              from the actual procedure name.  The default value is ::.

       -main string
              The name of the main procedure (method, ...) to be called by the
              chosen framework (template) to start parsing input.  The default
              value is __main.

       -prelude string
              A snippet of code to be insert at the head of each generated
              parsing command.  The default value is the empty string.

       -indent integer
              The number of characters to indent each line of the generated code
              by.  The default value is 0.

       While the high parameterizability of this converter, as shown by the
       multitude of options it supports, is an advantage to the advanced user,
       allowing her to customize the output of the converter as needed, a novice
       user will likely not see the forest for the trees.

       To help these latter users two adjunct packages are provided, each
       containing a canned configuration which will generate immediately useful
       full parsers. These are

       pt::tclparam::configuration::snit
              Generated parsers are classes based on the snit package, i.e.
              snit::type's.

       pt::tclparam::configuration::tcloo
              Generated parsers are classes based on the OO package.

TCL/PARAM CODE REPRESENTATION OF PARSING EXPRESSION GRAMMARS
       The Tcl/PARAM representation of parsing expression grammars is Tcl code
       whose execution will parse input per the grammar. The code is based on
       the virtual machine documented in the PackRat Machine Specification,
       using its instructions and a few more to handle control flow.

       Note that the generated code by itself is not functional. It expects to
       be embedded into a framework which provides services like the PARAM
       state, implementations for the PARAM instructions, etc.  The bulk of such
       a framework has to be specified through the option -template. The
       additional options

       -indent integer

       -main string

       -namespace string

       -prelude string

       -proc-command string

       -runtime-command string

       -self-command string

       provide code snippets which help to glue framework and generated code
       together. Their placeholders are in the generated code.

PEG SERIALIZATION FORMAT
       Here we specify the format used by the Parser Tools to serialize Parsing
       Expression Grammars as immutable values for transport, comparison, etc.

       We distinguish between regular and canonical serializations.  While a PEG
       may have more than one regular serialization only exactly one of them
       will be canonical.

       regular serialization

              [1]    The serialization of any PEG is a nested Tcl dictionary.

              [2]    This dictionary holds a single key, pt::grammar::peg, and
                     its value. This value holds the contents of the grammar.

              [3]    The contents of the grammar are a Tcl dictionary holding
                     the set of nonterminal symbols and the starting expression.
                     The relevant keys and their values are

                     rules  The value is a Tcl dictionary whose keys are the
                            names of the nonterminal symbols known to the
                            grammar.

                            [1]    Each nonterminal symbol may occur only once.

                            [2]    The empty string is not a legal nonterminal
                                   symbol.

                            [3]    The value for each symbol is a Tcl dictionary
                                   itself. The relevant keys and their values in
                                   this dictionary are

                                   is     The value is the serialization of the
                                          parsing expression describing the
                                          symbols sentennial structure, as
                                          specified in the section PE
                                          serialization format.

                                   mode   The value can be one of three values
                                          specifying how a parser should handle
                                          the semantic value produced by the
                                          symbol.

                                          value  The semantic value of the
                                                 nonterminal symbol is an
                                                 abstract syntax tree consisting
                                                 of a single node node for the
                                                 nonterminal itself, which has
                                                 the ASTs of the symbol's right
                                                 hand side as its children.

                                          leaf   The semantic value of the
                                                 nonterminal symbol is an
                                                 abstract syntax tree consisting
                                                 of a single node node for the
                                                 nonterminal, without any
                                                 children. Any ASTs generated by
                                                 the symbol's right hand side
                                                 are discarded.

                                          void   The nonterminal has no semantic
                                                 value. Any ASTs generated by
                                                 the symbol's right hand side
                                                 are discarded (as well).

                     start  The value is the serialization of the start parsing
                            expression of the grammar, as specified in the
                            section PE serialization format.

              [4]    The terminal symbols of the grammar are specified
                     implicitly as the set of all terminal symbols used in the
                     start expression and on the RHS of the grammar rules.

       canonical serialization
              The canonical serialization of a grammar has the format as
              specified in the previous item, and then additionally satisfies
              the constraints below, which make it unique among all the possible
              serializations of this grammar.

              [1]    The keys found in all the nested Tcl dictionaries are
                     sorted in ascending dictionary order, as generated by Tcl's
                     builtin command lsort -increasing -dict.

              [2]    The string representation of the value is the canonical
                     representation of a Tcl dictionary. I.e. it does not
                     contain superfluous whitespace.

   EXAMPLE
       Assuming the following PEG for simple mathematical expressions


       PEG calculator (Expression)
           Digit      <- '0'/'1'/'2'/'3'/'4'/'5'/'6'/'7'/'8'/'9'   ;
           Sign       <- '-' / '+'                       ;
           Number     <- Sign? Digit+                         ;
           Expression <- '(' Expression ')' / (Factor (MulOp Factor)*)  ;
           MulOp      <- '*' / '/'                       ;
           Factor     <- Term (AddOp Term)*                   ;
           AddOp      <- '+'/'-'                         ;
           Term       <- Number                     ;
       END;


       then its canonical serialization (except for whitespace) is


       pt::grammar::peg {
           rules {
            AddOp      {is {/ {t -} {t +}}                                                                mode value}
            Digit      {is {/ {t 0} {t 1} {t 2} {t 3} {t 4} {t 5} {t 6} {t 7} {t 8} {t 9}}                mode value}
            Expression {is {/ {x {t (} {n Expression} {t )}} {x {n Factor} {* {x {n MulOp} {n Factor}}}}} mode value}
            Factor     {is {x {n Term} {* {x {n AddOp} {n Term}}}}                                        mode value}
            MulOp      {is {/ {t *} {t /}}                                                                mode value}
            Number     {is {x {? {n Sign}} {+ {n Digit}}}                                                 mode value}
            Sign       {is {/ {t -} {t +}}                                                                mode value}
            Term       {is  {n Number}                                                                    mode value}
           }
           start {n Expression}
       }


PE SERIALIZATION FORMAT
       Here we specify the format used by the Parser Tools to serialize Parsing
       Expressions as immutable values for transport, comparison, etc.

       We distinguish between regular and canonical serializations.  While a
       parsing expression may have more than one regular serialization only
       exactly one of them will be canonical.

       Regular serialization

              Atomic Parsing Expressions

                     [1]    The string epsilon is an atomic parsing expression.
                            It matches the empty string.

                     [2]    The string dot is an atomic parsing expression. It
                            matches any character.

                     [3]    The string alnum is an atomic parsing expression. It
                            matches any Unicode alphabet or digit character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [4]    The string alpha is an atomic parsing expression. It
                            matches any Unicode alphabet character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [5]    The string ascii is an atomic parsing expression. It
                            matches any Unicode character below U0080. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [6]    The string control is an atomic parsing expression.
                            It matches any Unicode control character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [7]    The string digit is an atomic parsing expression. It
                            matches any Unicode digit character. Note that this
                            includes characters outside of the [0..9] range.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [8]    The string graph is an atomic parsing expression. It
                            matches any Unicode printing character, except for
                            space. This is a custom extension of PEs based on
                            Tcl's builtin command string is.

                     [9]    The string lower is an atomic parsing expression. It
                            matches any Unicode lower-case alphabet character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [10]   The string print is an atomic parsing expression. It
                            matches any Unicode printing character, including
                            space. This is a custom extension of PEs based on
                            Tcl's builtin command string is.

                     [11]   The string punct is an atomic parsing expression. It
                            matches any Unicode punctuation character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [12]   The string space is an atomic parsing expression. It
                            matches any Unicode space character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [13]   The string upper is an atomic parsing expression. It
                            matches any Unicode upper-case alphabet character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [14]   The string wordchar is an atomic parsing expression.
                            It matches any Unicode word character. This is any
                            alphanumeric character (see alnum), and any
                            connector punctuation characters (e.g.  underscore).
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [15]   The string xdigit is an atomic parsing expression.
                            It matches any hexadecimal digit character. This is
                            a custom extension of PEs based on Tcl's builtin
                            command string is.

                     [16]   The string ddigit is an atomic parsing expression.
                            It matches any decimal digit character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command regexp.

                     [17]   The expression [list t x] is an atomic parsing
                            expression. It matches the terminal string x.

                     [18]   The expression [list n A] is an atomic parsing
                            expression. It matches the nonterminal A.

              Combined Parsing Expressions

                     [1]    For parsing expressions e1, e2, ... the result of
                            [list / e1 e2 ... ] is a parsing expression as well.
                            This is the ordered choice, aka prioritized choice.

                     [2]    For parsing expressions e1, e2, ... the result of
                            [list x e1 e2 ... ] is a parsing expression as well.
                            This is the sequence.

                     [3]    For a parsing expression e the result of [list * e]
                            is a parsing expression as well.  This is the kleene
                            closure, describing zero or more repetitions.

                     [4]    For a parsing expression e the result of [list + e]
                            is a parsing expression as well.  This is the
                            positive kleene closure, describing one or more
                            repetitions.

                     [5]    For a parsing expression e the result of [list & e]
                            is a parsing expression as well.  This is the and
                            lookahead predicate.

                     [6]    For a parsing expression e the result of [list ! e]
                            is a parsing expression as well.  This is the not
                            lookahead predicate.

                     [7]    For a parsing expression e the result of [list ? e]
                            is a parsing expression as well.  This is the
                            optional input.

       Canonical serialization
              The canonical serialization of a parsing expression has the format
              as specified in the previous item, and then additionally satisfies
              the constraints below, which make it unique among all the possible
              serializations of this parsing expression.

              [1]    The string representation of the value is the canonical
                     representation of a pure Tcl list. I.e. it does not contain
                     superfluous whitespace.

              [2]    Terminals are not encoded as ranges (where start and end of
                     the range are identical).

   EXAMPLE
       Assuming the parsing expression shown on the right-hand side of the rule


           Expression <- '(' Expression ')'
                       / Factor (MulOp Factor)*


       then its canonical serialization (except for whitespace) is


           {/ {x {t (} {n Expression} {t )}} {x {n Factor} {* {x {n MulOp} {n Factor}}}}}


BUGS, IDEAS, FEEDBACK
       This document, and the package it describes, will undoubtedly contain
       bugs and other problems.  Please report such in the category pt of the
       Tcllib SF Trackers [http://sourceforge.net/tracker/?group_id=12883].
       Please also report any ideas for enhancements you may have for either
       package and/or documentation.

KEYWORDS
       EBNF, LL(k), PEG, TCLPARAM, TDPL, context-free languages, conversion,
       expression, format conversion, grammar, matching, parser, parsing
       expression, parsing expression grammar, push down automaton, recursive
       descent, serialization, state, top-down parsing languages, transducer

CATEGORY
       Parsing and Grammars

COPYRIGHT
       Copyright (c) 2009 Andreas Kupries <andreas_kupries@users.sourceforge.net>




