ldapx(n)                 LDAP extended object interface                 ldapx(n)



________________________________________________________________________________

NAME
       ldapx - LDAP extended object interface

SYNOPSIS
       package require Tcl  8.4

       package require ldapx  ?1.0?

       e reset

       e dn ?newdn?

       e rdn

       e superior

       e print

       se isempty

       se get attr

       se get1 attr

       se set attr values

       se set1 attr value

       se add attr values

       se add1 attr value

       se del attr ?values?

       se del1 attr value

       se getattr

       se getall

       se setall avpairs

       se backup ?other?

       se swap

       se restore ?other?

       se apply centry

       ce change ?new?

       ce diff new ?old?

       la error ?newmsg?

       la connect url ?binddn? ?bindpw?

       la disconnect

       la traverse base filter attrs entry body

       la search base filter attrs

       la read base filter entry ... entry

       la commit entry ... entry

       li channel chan

       li error ?newmsg?

       li read entry

       li write entry

________________________________________________________________________________

DESCRIPTION
       The ldapx package provides an extended Tcl interface to LDAP directores
       and LDIF files. The ldapx package is built upon the ldap package in order
       to get low level LDAP access.

       LDAP access is compatible with RFC 2251 (http://www.rfc-
       editor.org/rfc/rfc2251.txt).  LDIF access is compatible with RFC 2849
       (http://www.rfc-editor.org/rfc/rfc2849.txt).

OVERVIEW
       The ldapx package provides objects to interact with LDAP directories and
       LDIF files with an easy to use programming interface.  It implements
       three snit::type classes.

       The first class, entry, is used to store individual entries.  Two
       different formats are available: the first one is the standard format,
       which represents an entry as read from the directory. The second format
       is the change format, which stores differences between two standard
       entries.

       With these entries, an application which wants to modify an entry in a
       directory needs to read a (standard) entry from the directory, create a
       fresh copy into a new (standard) entry, modify the new copy, and then
       compute the differences between the two entries into a new (change)
       entry, which may be commited to the directory.

       Such kinds of modifications are so heavily used that standard entries may
       contain their own copy of the original data. With such a copy, the
       application described above reads a (standard) entry from the directory,
       backs-up the original data, modifies the entry, and computes the
       differences between the entry and its backup. These differences are then
       commited to the directory.

       Methods are provided to compute differences between two entries, to apply
       differences to an entry in order to get a new entry, and to get or set
       attributes in standard entries.

       The second class is the ldap class. It provides a method to connect and
       bind to the directory with a uniform access to LDAP and LDAPS through an
       URL (ldap:// or ldaps://). The traverse control structure executes a body
       for each entry found in the directory. The commit method applies some
       changes (represented as entry objects) to the directory.  Since some
       attributes are represented as UTF-8 strings, the option -utf8 controls
       which attributes must be converted and which attributes must not be
       converted.

       The last class is the ldif class. It provides a method to associate a
       standard Tcl channel to an LDIF object. Then, methods read and write read
       or write entries from or to this channel. This class can make use of
       standard or change entries, according to the type of the LDIF file which
       may contain either standard entries or change entries (but not both at
       the same time). The option -utf8 works exactly as with the ldap class.

ENTRY CLASS
   ENTRY INSTANCE DATA
       An instance of the entry class keeps the following data:

       dn     This is the DN of the entry, which includes (in LDAP terminology)
              the RDN (relative DN) and the Superior parts.

       format The format may be uninitialized (entry not yet used), standard or
              change. Most methods check the format of the entry, which can be
              reset with the reset method.

       attrvals
              In a standard entry, this is where the attributes and associated
              values are stored. Many methods provide access to these
              informations. Attribute names are always converted into lower
              case.

       backup In a standard entry, the backup may contain a copy of the dn and
              all attributes and values. Methods backup and restore manipulate
              these data, and method diff may use this backup.

       change In a change entry, these data represent the modifications. Such
              modifications are handled by specialized methods such as apply or
              commit.  Detailed format should not be used directly by programs.

              Internally, modifications are represented as a list of elements,
              each element has one of the following formats (which match the
              corresponding LDAP operations):

              [1]    {add {attr1 {val1...valn} attr2 {...} ...}}

                     Addition of a new entry.

              [2]    {mod {modop {attr1 ?val1...valn?} attr2 ...} {modop ...}
                     ...}

                     Modification of one or more attributes and/or values, where
                     <modop> can be modadd, moddel or modrepl (see the LDAP
                     modify operation).

              [3]    {del}

                     Deletion of an old entry.

              [4]    {modrdn newrdn deleteoldrdn ?newsuperior?}

                     Renaming of an entry.

   ENTRY OPTIONS
       No option is defined by this class.

   METHODS FOR ALL KINDS OF ENTRIES
       e reset
              This method resets the entry to an uninitialized state.

       e dn ?newdn?
              This method returns the current DN of the entry. If the optional
              newdn is specified, it replaces the current DN of the entry.

       e rdn  This method returns the RDN part of the DN of the entry.

       e superior
              This method returns the superior part of the DN of the entry.

       e print
              This method returns the entry as a string ready to be printed.

   METHODS FOR STANDARD ENTRIES ONLY
       In all methods, attribute names are converted in lower case.

       se isempty
              This method returns 1 if the entry is empty (i.e. without any
              attribute).

       se get attr
              This method returns all values of the attribute attr, or the empty
              list if the attribute is not fond.

       se get1 attr
              This method returns the first value of the attribute.

       se set attr values
              This method sets the values (list values) of the attribute attr.
              If the list is empty, this method deletes all

       se set1 attr value
              This method sets the values of the attribute attr to be an unique
              value value. Previous values, if any, are replaced by the new
              value.

       se add attr values
              This method adds all elements the list values to the values of the
              attribute attr.

       se add1 attr value
              This method adds a single value given by the parameter value to
              the attribute attr.

       se del attr ?values?
              If the optional list values is specified, this method deletes all
              specified values from the attribute attr.  If the argument values
              is not specified, this method deletes all values.

       se del1 attr value
              This method deletes a unique value from the attribute attr.

       se getattr
              This method returns all attributes names.

       se getall
              This method returns all attributes and values from the entry,
              packed in a list of pairs <attribute, list of values>.

       se setall avpairs
              This method sets at once all attributes and values. The format of
              the avpairs argument is the same as the one returned by method
              getall.

       se backup ?other?
              This method stores in an other standard entry object a copy of the
              current DN and attributes/values. If the optional other argument
              is not specified, copy is done in the current entry (in a specific
              place, see section OVERVIEW).

       se swap
              This method swaps the current and backup contexts of the entry.

       se restore ?other?
              If the optional argument other is given, which must then be a
              standard entry, this method restores the current entry into the
              other entry. If the argument other argument is not specified, this
              methods restores the current entry from its internal backup (see
              section OVERVIEW).

       se apply centry
              This method applies changes defined in the centry argument, which
              must be a change entry.

   METHODS FOR CHANGE ENTRIES ONLY
       ce change ?new?
              If the optional argument new is specified, this method modifies
              the change list (see subsection Entry Instance Data for the exact
              format). In both cases, current change list is returned.  Warning:
              values returned by this method should only be used by specialized
              methods such as apply or commit.

       ce diff new ?old?
              This method computes the differences between the new and old
              entries under the form of a change list, and stores this list into
              the current change entry. If the optional argument old is not
              specified, difference is computed from the entry and its internal
              backup (see section OVERVIEW). Return value is the computed change
              list.

   ENTRY EXAMPLE

           package require ldapx

           #
           # Create an entry and fill it as a standard entry with
           # attributes and values
           #
           ::ldapx::entry create e
           e dn "uid=joe,ou=people,o=mycomp"
           e set1 "uid"             "joe"
           e set  "objectClass"     {person anotherObjectClass}
           e set1 "givenName"       "Joe"
           e set1 "sn"              "User"
           e set  "telephoneNumber" {+31415926535 +2182818}
           e set1 "anotherAttr"     "This is a beautiful day, isn't it?"

           puts stdout "e\n[e print]"

           #
           # Create a second entry as a backup of the first, and
           # make some changes on it.
           # Entry is named automatically by snit.
           #

           set b [::ldapx::entry create %AUTO%]
           e backup $b

           puts stdout "$b\n[$b print]"

           $b del  "anotherAttr"
           $b del1 "objectClass" "anotherObjectClass"

           #
           # Create a change entry, a compute differences between first
           # and second entry.
           #

           ::ldapx::entry create c
           c diff e $b

           puts stdout "$c\n[$c print]"

           #
           # Apply changes to first entry. It should be the same as the
           # second entry, now.
           #

           e apply c

           ::ldapx::entry create nc
           nc diff e $b

           puts stdout "nc\n[nc print]"

           #
           # Clean-up
           #

           e destroy
           $b destroy
           c destroy
           nc destroy


LDAP CLASS
   LDAP INSTANCE DATA
       An instance of the ldap class keeps the following data:

       channel
              This is the channel used by the ldap package for communication
              with the LDAP server.

       lastError
              This variable contains the error message which appeared in the
              last method of the ldap class (this string is modified in nearly
              all methods). The error method may be used to fetch this message.

   LDAP OPTIONS
       A first set of options of the ldap class is used during search operations
       (methods traverse, search and read, see below).

       -scope base|one|sub
              Specify the scope of the LDAP search to be one of base, one or sub
              to specify a base object, one-level or subtree search.

              The default is sub.

       -derefaliases never|seach|find|always
              Specify how aliases dereferencing is handled: never is used to
              specify that aliases are never derefenced, always that aliases are
              always derefenced, search that aliases are dereferenced when
              searching, or find that aliases are dereferenced only  when
              locating  the  base object for the search.

              The default is never.

       -sizelimit integer
              Specify the maximum number of entries to be retreived during a
              search. A value of 0 means no limit.

              Default is 0.

       -timelimit integer
              Specify the time limit for a search to complete.  A value of 0
              means no limit.

              Default is 0.

       -attrsonly 0|1
              Specify if only attribute names are to be retrieved (value 1).
              Normally (value 0), attribute values are also retrieved.

              Default is 0.

       The last option is used when getting entries or committing changes in the
       directory:

       -utf8 pattern-yes pattern-no
              Specify which attribute values are encoded in UTF-8. This
              information is specific to the LDAP schema in use by the
              application, since some attributes such as jpegPhoto, for example,
              are not encoded in UTF-8. This option takes the form of a list
              with two regular expressions suitable for the regexp command
              (anchored by ^ and $).  The first specifies which attribute names
              are to be UTF-8 encoded, and the second selects, among those, the
              attribute names which will not be UTF-8 encoded.  It is thus
              possible to say: convert all attributes, except jpegPhoto.

              Default is {{.*} {}}, meaning: all attributes are converted,
              without exception.

   LDAP METHODS
       la error ?newmsg?
              This method returns the error message that occurred in the last
              call to a ldap class method. If the optional argument newmsg is
              supplied, it becomes the last error message.

       la connect url ?binddn? ?bindpw?
              This method connects to the LDAP server using given URL (which can
              be of the form ldap://host:port or ldaps://host:port). If an
              optional binddn argument is given together with the bindpw
              argument, the connect binds to the LDAP server using the specified
              DN and password.

       la disconnect
              This method disconnects (and unbinds, if necessary) from the LDAP
              server.

       la traverse base filter attrs entry body
              This method is a new control structure. It searches the LDAP
              directory from the specified base DN (given by the base argument)
              and selects entries based on the argument filter. For each entry
              found, this method fetches attributes specified by the attrs
              argument (or all attributes if it is an empty list), stores them
              in the entry instance of class entry and executes the script
              defined by the argument body. Options are used to refine the
              search.

              Caution: when this method is used, the script body cannot perform
              another LDAP search (methods traverse, search or read).

       la search base filter attrs
              This method searches the directory using the same way as method
              traverse. All found entries are stored in newly created instances
              of class entry, which are returned in a list. The newly created
              instances should be destroyed when they are no longer used.

       la read base filter entry ... entry
              This method reads one or more entries, using the same search
              criteria as methods traverse and search.  All attributes are
              stored in the entries. This method provides a quick way to read
              some entries. It returns the number of entries found in the
              directory (which may be more than the number of read entries). If
              called without any entry argument, this method just returns the
              number of entries found, without returning any data.

       la commit entry ... entry
              This method commits the changes stored in the entry arguments.
              Each entry may be either a change entry, or a standard entry with
              a backup.

              Note: in the future, this method should use the LDAP transaction
              extension provided by OpenLDAP 2.3 and later.

   LDAP EXAMPLE

           package require ldapx

           #
           # Connects to the LDAP directory
           #

           ::ldapx::ldap create l
           set url "ldap://server.mycomp.com"
           if {! [l connect $url "cn=admin,o=mycomp" "mypasswd"]} then {
            puts stderr "error: [l error]"
            exit 1
           }

           #
           # Search all entries matching some criterion
           #

           l configure -scope one
           ::ldapx::ldap create e
           set n 0
           l traverse "ou=people,o=mycomp" "(sn=Joe*)" {sn givenName} e {
            puts "dn: [e dn]"
            puts "  sn:        [e get1 sn]"
            puts "  givenName: [e get1 givenName]"
            incr n
           }
           puts "$n entries found"
           e destroy

           #
           # Add a telephone number to some entries
           # Note this modification cannot be done in the "traverse" operation.
           #

           set lent [l search "ou=people,o=mycomp" "(sn=Joe*)" {}]
           ::ldapx::ldap create c
           foreach e $lent {
            $e backup
            $e add1 "telephoneNumber" "+31415926535"
            c diff $e
            if {! [l commit c]} then {
                puts stderr "error: [l error]"
                exit 1
            }
            $e destroy
           }

           l disconnect
           l destroy


LDIF CLASS
   LDIF INSTANCE DATA
       An instance of the ldif class keeps the following data:

       channel
              This is the Tcl channel used to retrieve or store LDIF file
              contents. The association between an instance and a channel is
              made by the method channel. There is no need to disrupt this
              association when the LDIF file operation has ended.

       format LDIF files may contain standard entries or change entries, but not
              both. This variable contains the detected format of the file (when
              reading) or the format of entries written to the file (when
              writing).

       lastError
              This variable contains the error message which appeared in the
              last method of the ldif class (this string is modified in nearly
              all methods). The error method may be used to fetch this message.

       version
              This is the version of the LDIF file. Only version 1 is supported:
              the method read can only read from version 1 files, and method
              write only creates version 1 files.

   LDIF OPTIONS
       This class defines two options:

       -ignore list-of-attributes
              This option is used to ignore certain attribute names on reading.
              For example, to read OpenLDAP replica files (replog), one must
              ignore replica and time attributes since they do not conform to
              the RFC 2849 standard for LDIF files.

              Default is empty list: no attribute is ignored.

       -utf8 pattern-yes pattern-no
              Specify which attribute values are encoded in UTF-8. This
              information is specific to the LDAP schema in use by the
              application, since some attributes such as jpegPhoto, for example,
              are not encoded in UTF-8. This option takes the form of a list
              with two regular expressions suitable for the regexp command
              (anchored by ^ and $).  The first specifies which attribute names
              are to be UTF-8 encoded, and the second selects, among those, the
              attribute names which will not be UTF-8 encoded.  It is thus
              possible to say: convert all attributes, except jpegPhoto.

              Default is {{.*} {}}, meaning: all attributes are converted,
              without exception.

   LDIF METHODS
       li channel chan
              This method associates the Tcl channel named chan with the LDIF
              instance. It resets the type of LDIF object to uninitialized.

       li error ?newmsg?
              This method returns the error message that occurred in the last
              call to a ldif class method. If the optional argument newmsg is
              supplied, it becomes the last error message.

       li read entry
              This method reads the next entry from the LDIF file and stores it
              in the entry object of class entry.  The entry may be a standard
              or change entry.

       li write entry
              This method writes the entry given in the argument entry to the
              LDIF file.

   LDIF EXAMPLE

           package require ldapx

           # This examples reads a LDIF file containing entries,
           # compare them to a LDAP directory, and writes on standard
           # output an LDIF file containing changes to apply to the
           # LDAP directory to match exactly the LDIF file.

           ::ldapx::ldif create liin
           liin channel stdin

           ::ldapx::ldif create liout
           liout channel stdout

           ::ldapx::ldap create la
           if {! [la connect "ldap://server.mycomp.com"]} then {
            puts stderr "error: [la error]"
            exit 1
           }
           la configure -scope one

           # Reads LDIF file

           ::ldapx::entry create e1
           ::ldapx::entry create e2
           ::ldapx::entry create c

           while {[liin read e1] != 0} {
            set base [e1 superior]
            set id [e1 rdn]
            if {[la read $base "($id)" e2] == 0} then {
                e2 reset
            }

            c diff e1 e2
            if {[llength [c change]] != 0} then {
                liout write c
            }
           }

           la disconnect
           la destroy
           e1 destroy
           e2 destroy
           c destroy
           liout destroy
           liin destroy


REFERENCES
BUGS, IDEAS, FEEDBACK
       This document, and the package it describes, will undoubtedly contain
       bugs and other problems.  Please report such in the category ldap of the
       Tcllib SF Trackers [http://sourceforge.net/tracker/?group_id=12883].
       Please also report any ideas for enhancements you may have for either
       package and/or documentation.

KEYWORDS
       directory access, internet, ldap, ldap client, ldif, protocol, rfc 2251,
       rfc 2849

CATEGORY
       Networking

COPYRIGHT
       Copyright (c) 2006 Pierre David <pdav@users.sourceforge.net>




