pt::peg::to::param(n)             Parser Tools             pt::peg::to::param(n)



________________________________________________________________________________

NAME
       pt::peg::to::param - PEG Conversion. Write PARAM format

SYNOPSIS
       package require Tcl  8.5

       package require pt::peg::to::param  ?1?

       package require pt::peg

       package require pt::pe

       pt::peg::to::param reset

       pt::peg::to::param configure

       pt::peg::to::param configure option

       pt::peg::to::param configure option value...

       pt::peg::to::param convert serial

________________________________________________________________________________

DESCRIPTION
       Are you lost ?  Do you have trouble understanding this document ?  In
       that case please read the overview provided by the Introduction to Parser
       Tools. This document is the entrypoint to the whole system the current
       package is a part of.

       This package implements the converter from parsing expression grammars to
       PARAM markup.

       It resides in the Export section of the Core Layer of Parser Tools, and
       can be used either directly with the other packages of this layer, or
       indirectly through the export manager provided by pt::peg::export. The
       latter is intented for use in untrusted environments and done through the
       corresponding export plugin pt::peg::export::param sitting between
       converter and export manager.

       IMAGE: arch_core_eplugins

API
       The API provided by this package satisfies the specification of the
       Converter API found in the Parser Tools Export API specification.

       pt::peg::to::param reset
              This command resets the configuration of the package to its
              default settings.

       pt::peg::to::param configure
              This command returns a dictionary containing the current
              configuration of the package.

       pt::peg::to::param configure option
              This command returns the current value of the specified
              configuration option of the package. For the set of legal options,
              please read the section Options.

       pt::peg::to::param configure option value...
              This command sets the given configuration options of the package,
              to the specified values. For the set of legal options, please read
              the section Options.

       pt::peg::to::param convert serial
              This command takes the canonical serialization of a parsing
              expression grammar, as specified in section PEG serialization
              format, and contained in serial, and generates PARAM markup
              encoding the grammar, per the current package configuration.  The
              created string is then returned as the result of the command.

OPTIONS
       The converter to PARAM markup recognizes the following configuration
       variables and changes its behaviour as they specify.

       -template string
              The value of this configuration variable is a string into which to
              put the generated text and the other configuration settings. The
              various locations for user-data are expected to be specified with
              the placeholders listed below. The default value is "@code@".

              @user@ To be replaced with the value of the configuration variable
                     -user.

              @format@
                     To be replaced with the the constant PARAM.

              @file@ To be replaced with the value of the configuration variable
                     -file.

              @name@ To be replaced with the value of the configuration variable
                     -name.

              @code@ To be replaced with the generated text.

       -name string
              The value of this configuration variable is the name of the
              grammar for which the conversion is run. The default value is
              a_pe_grammar.

       -user string
              The value of this configuration variable is the name of the user
              for which the conversion is run. The default value is unknown.

       -file string
              The value of this configuration variable is the name of the file
              or other entity from which the grammar came, for which the
              conversion is run. The default value is unknown.

PARAM CODE REPRESENTATION OF PARSING EXPRESSION GRAMMARS
       The PARAM code representation of parsing expression grammars is
       assembler-like text using the instructions of the virtual machine
       documented in the PackRat Machine Specification, plus a few more for
       control flow (jump ok, jump fail, call symbol, return).

       It is not really useful, except possibly as a tool demonstrating how a
       grammar is compiled in general, without getting distracted by the
       incidentials of a framework, i.e. like the supporting C and Tcl code
       generated by the other PARAM-derived formats.

       It has no direct formal specification beyond what was said above.

   EXAMPLE
       Assuming the following PEG for simple mathematical expressions


       PEG calculator (Expression)
           Digit      <- '0'/'1'/'2'/'3'/'4'/'5'/'6'/'7'/'8'/'9'   ;
           Sign       <- '-' / '+'                       ;
           Number     <- Sign? Digit+                         ;
           Expression <- '(' Expression ')' / (Factor (MulOp Factor)*)  ;
           MulOp      <- '*' / '/'                       ;
           Factor     <- Term (AddOp Term)*                   ;
           AddOp      <- '+'/'-'                         ;
           Term       <- Number                     ;
       END;


       one possible PARAM serialization for it is


       # -*- text -*-
       # Parsing Expression Grammar 'TEMPLATE'.
       # Generated for unknown, from file 'TEST'

       #
       # Grammar Start Expression
       #

       <<MAIN>>:
                call              sym_Expression
                halt

       #
       # value Symbol 'AddOp'
       #

       sym_AddOp:
       # /
       #     '-'
       #     '+'

                symbol_restore    AddOp
         found! jump              found_7
                loc_push

                call              choice_5

          fail! value_clear
            ok! value_leaf        AddOp
                symbol_save       AddOp
                error_nonterminal AddOp
                loc_pop_discard

       found_7:
            ok! ast_value_push
                return

       choice_5:
       # /
       #     '-'
       #     '+'

                error_clear

                loc_push
                error_push

                input_next        "t -"
            ok! test_char         "-"

                error_pop_merge
            ok! jump              oknoast_4

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t +"
            ok! test_char         "+"

                error_pop_merge
            ok! jump              oknoast_4

                loc_pop_rewind
                status_fail
                return

       oknoast_4:
                loc_pop_discard
                return
       #
       # value Symbol 'Digit'
       #

       sym_Digit:
       # /
       #     '0'
       #     '1'
       #     '2'
       #     '3'
       #     '4'
       #     '5'
       #     '6'
       #     '7'
       #     '8'
       #     '9'

                symbol_restore    Digit
         found! jump              found_22
                loc_push

                call              choice_20

          fail! value_clear
            ok! value_leaf        Digit
                symbol_save       Digit
                error_nonterminal Digit
                loc_pop_discard

       found_22:
            ok! ast_value_push
                return

       choice_20:
       # /
       #     '0'
       #     '1'
       #     '2'
       #     '3'
       #     '4'
       #     '5'
       #     '6'
       #     '7'
       #     '8'
       #     '9'

                error_clear

                loc_push
                error_push

                input_next        "t 0"
            ok! test_char         "0"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 1"
            ok! test_char         "1"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 2"
            ok! test_char         "2"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 3"
            ok! test_char         "3"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 4"
            ok! test_char         "4"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 5"
            ok! test_char         "5"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 6"
            ok! test_char         "6"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 7"
            ok! test_char         "7"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 8"
            ok! test_char         "8"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t 9"
            ok! test_char         "9"

                error_pop_merge
            ok! jump              oknoast_19

                loc_pop_rewind
                status_fail
                return

       oknoast_19:
                loc_pop_discard
                return
       #
       # value Symbol 'Expression'
       #

       sym_Expression:
       # /
       #     x
       #         '\('
       #         (Expression)
       #         '\)'
       #     x
       #         (Factor)
       #         *
       #             x
       #                 (MulOp)
       #                 (Factor)

                symbol_restore    Expression
         found! jump              found_46
                loc_push
                ast_push

                call              choice_44

          fail! value_clear
            ok! value_reduce      Expression
                symbol_save       Expression
                error_nonterminal Expression
                ast_pop_rewind
                loc_pop_discard

       found_46:
            ok! ast_value_push
                return

       choice_44:
       # /
       #     x
       #         '\('
       #         (Expression)
       #         '\)'
       #     x
       #         (Factor)
       #         *
       #             x
       #                 (MulOp)
       #                 (Factor)

                error_clear

                ast_push
                loc_push
                error_push

                call              sequence_27

                error_pop_merge
            ok! jump              ok_43

                ast_pop_rewind
                loc_pop_rewind
                ast_push
                loc_push
                error_push

                call              sequence_40

                error_pop_merge
            ok! jump              ok_43

                ast_pop_rewind
                loc_pop_rewind
                status_fail
                return

       ok_43:
                ast_pop_discard
                loc_pop_discard
                return

       sequence_27:
       # x
       #     '\('
       #     (Expression)
       #     '\)'

                loc_push
                error_clear

                error_push

                input_next        "t ("
            ok! test_char         "("

                error_pop_merge
          fail! jump              failednoast_29
                ast_push
                error_push

                call              sym_Expression

                error_pop_merge
          fail! jump              failed_28
                error_push

                input_next        "t )"
            ok! test_char         ")"

                error_pop_merge
          fail! jump              failed_28

                ast_pop_discard
                loc_pop_discard
                return

       failed_28:
                ast_pop_rewind

       failednoast_29:
                loc_pop_rewind
                return

       sequence_40:
       # x
       #     (Factor)
       #     *
       #         x
       #             (MulOp)
       #             (Factor)

                ast_push
                loc_push
                error_clear

                error_push

                call              sym_Factor

                error_pop_merge
          fail! jump              failed_41
                error_push

                call              kleene_37

                error_pop_merge
          fail! jump              failed_41

                ast_pop_discard
                loc_pop_discard
                return

       failed_41:
                ast_pop_rewind
                loc_pop_rewind
                return

       kleene_37:
       # *
       #     x
       #         (MulOp)
       #         (Factor)

                loc_push
                error_push

                call              sequence_34

                error_pop_merge
          fail! jump              failed_38
                loc_pop_discard
                jump              kleene_37

       failed_38:
                loc_pop_rewind
                status_ok
                return

       sequence_34:
       # x
       #     (MulOp)
       #     (Factor)

                ast_push
                loc_push
                error_clear

                error_push

                call              sym_MulOp

                error_pop_merge
          fail! jump              failed_35
                error_push

                call              sym_Factor

                error_pop_merge
          fail! jump              failed_35

                ast_pop_discard
                loc_pop_discard
                return

       failed_35:
                ast_pop_rewind
                loc_pop_rewind
                return
       #
       # value Symbol 'Factor'
       #

       sym_Factor:
       # x
       #     (Term)
       #     *
       #         x
       #             (AddOp)
       #             (Term)

                symbol_restore    Factor
         found! jump              found_60
                loc_push
                ast_push

                call              sequence_57

          fail! value_clear
            ok! value_reduce      Factor
                symbol_save       Factor
                error_nonterminal Factor
                ast_pop_rewind
                loc_pop_discard

       found_60:
            ok! ast_value_push
                return

       sequence_57:
       # x
       #     (Term)
       #     *
       #         x
       #             (AddOp)
       #             (Term)

                ast_push
                loc_push
                error_clear

                error_push

                call              sym_Term

                error_pop_merge
          fail! jump              failed_58
                error_push

                call              kleene_54

                error_pop_merge
          fail! jump              failed_58

                ast_pop_discard
                loc_pop_discard
                return

       failed_58:
                ast_pop_rewind
                loc_pop_rewind
                return

       kleene_54:
       # *
       #     x
       #         (AddOp)
       #         (Term)

                loc_push
                error_push

                call              sequence_51

                error_pop_merge
          fail! jump              failed_55
                loc_pop_discard
                jump              kleene_54

       failed_55:
                loc_pop_rewind
                status_ok
                return

       sequence_51:
       # x
       #     (AddOp)
       #     (Term)

                ast_push
                loc_push
                error_clear

                error_push

                call              sym_AddOp

                error_pop_merge
          fail! jump              failed_52
                error_push

                call              sym_Term

                error_pop_merge
          fail! jump              failed_52

                ast_pop_discard
                loc_pop_discard
                return

       failed_52:
                ast_pop_rewind
                loc_pop_rewind
                return
       #
       # value Symbol 'MulOp'
       #

       sym_MulOp:
       # /
       #     '*'
       #     '/'

                symbol_restore    MulOp
         found! jump              found_67
                loc_push

                call              choice_65

          fail! value_clear
            ok! value_leaf        MulOp
                symbol_save       MulOp
                error_nonterminal MulOp
                loc_pop_discard

       found_67:
            ok! ast_value_push
                return

       choice_65:
       # /
       #     '*'
       #     '/'

                error_clear

                loc_push
                error_push

                input_next        "t *"
            ok! test_char         "*"

                error_pop_merge
            ok! jump              oknoast_64

                loc_pop_rewind
                loc_push
                error_push

                input_next        "t /"
            ok! test_char         "/"

                error_pop_merge
            ok! jump              oknoast_64

                loc_pop_rewind
                status_fail
                return

       oknoast_64:
                loc_pop_discard
                return
       #
       # value Symbol 'Number'
       #

       sym_Number:
       # x
       #     ?
       #         (Sign)
       #     +
       #         (Digit)

                symbol_restore    Number
         found! jump              found_80
                loc_push
                ast_push

                call              sequence_77

          fail! value_clear
            ok! value_reduce      Number
                symbol_save       Number
                error_nonterminal Number
                ast_pop_rewind
                loc_pop_discard

       found_80:
            ok! ast_value_push
                return

       sequence_77:
       # x
       #     ?
       #         (Sign)
       #     +
       #         (Digit)

                ast_push
                loc_push
                error_clear

                error_push

                call              optional_70

                error_pop_merge
          fail! jump              failed_78
                error_push

                call              poskleene_73

                error_pop_merge
          fail! jump              failed_78

                ast_pop_discard
                loc_pop_discard
                return

       failed_78:
                ast_pop_rewind
                loc_pop_rewind
                return

       optional_70:
       # ?
       #     (Sign)

                loc_push
                error_push

                call              sym_Sign

                error_pop_merge
          fail! loc_pop_rewind
            ok! loc_pop_discard
                status_ok
                return

       poskleene_73:
       # +
       #     (Digit)

                loc_push

                call              sym_Digit

          fail! jump              failed_74

       loop_75:
                loc_pop_discard
                loc_push
                error_push

                call              sym_Digit

                error_pop_merge
            ok! jump              loop_75
                status_ok

       failed_74:
                loc_pop_rewind
                return
       #
       # value Symbol 'Sign'
       #

       sym_Sign:
       # /
       #     '-'
       #     '+'

                symbol_restore    Sign
         found! jump              found_86
                loc_push

                call              choice_5

          fail! value_clear
            ok! value_leaf        Sign
                symbol_save       Sign
                error_nonterminal Sign
                loc_pop_discard

       found_86:
            ok! ast_value_push
                return
       #
       # value Symbol 'Term'
       #

       sym_Term:
       # (Number)

                symbol_restore    Term
         found! jump              found_89
                loc_push
                ast_push

                call              sym_Number

          fail! value_clear
            ok! value_reduce      Term
                symbol_save       Term
                error_nonterminal Term
                ast_pop_rewind
                loc_pop_discard

       found_89:
            ok! ast_value_push
                return

       #
       #


PEG SERIALIZATION FORMAT
       Here we specify the format used by the Parser Tools to serialize Parsing
       Expression Grammars as immutable values for transport, comparison, etc.

       We distinguish between regular and canonical serializations.  While a PEG
       may have more than one regular serialization only exactly one of them
       will be canonical.

       regular serialization

              [1]    The serialization of any PEG is a nested Tcl dictionary.

              [2]    This dictionary holds a single key, pt::grammar::peg, and
                     its value. This value holds the contents of the grammar.

              [3]    The contents of the grammar are a Tcl dictionary holding
                     the set of nonterminal symbols and the starting expression.
                     The relevant keys and their values are

                     rules  The value is a Tcl dictionary whose keys are the
                            names of the nonterminal symbols known to the
                            grammar.

                            [1]    Each nonterminal symbol may occur only once.

                            [2]    The empty string is not a legal nonterminal
                                   symbol.

                            [3]    The value for each symbol is a Tcl dictionary
                                   itself. The relevant keys and their values in
                                   this dictionary are

                                   is     The value is the serialization of the
                                          parsing expression describing the
                                          symbols sentennial structure, as
                                          specified in the section PE
                                          serialization format.

                                   mode   The value can be one of three values
                                          specifying how a parser should handle
                                          the semantic value produced by the
                                          symbol.

                                          value  The semantic value of the
                                                 nonterminal symbol is an
                                                 abstract syntax tree consisting
                                                 of a single node node for the
                                                 nonterminal itself, which has
                                                 the ASTs of the symbol's right
                                                 hand side as its children.

                                          leaf   The semantic value of the
                                                 nonterminal symbol is an
                                                 abstract syntax tree consisting
                                                 of a single node node for the
                                                 nonterminal, without any
                                                 children. Any ASTs generated by
                                                 the symbol's right hand side
                                                 are discarded.

                                          void   The nonterminal has no semantic
                                                 value. Any ASTs generated by
                                                 the symbol's right hand side
                                                 are discarded (as well).

                     start  The value is the serialization of the start parsing
                            expression of the grammar, as specified in the
                            section PE serialization format.

              [4]    The terminal symbols of the grammar are specified
                     implicitly as the set of all terminal symbols used in the
                     start expression and on the RHS of the grammar rules.

       canonical serialization
              The canonical serialization of a grammar has the format as
              specified in the previous item, and then additionally satisfies
              the constraints below, which make it unique among all the possible
              serializations of this grammar.

              [1]    The keys found in all the nested Tcl dictionaries are
                     sorted in ascending dictionary order, as generated by Tcl's
                     builtin command lsort -increasing -dict.

              [2]    The string representation of the value is the canonical
                     representation of a Tcl dictionary. I.e. it does not
                     contain superfluous whitespace.

   EXAMPLE
       Assuming the following PEG for simple mathematical expressions


       PEG calculator (Expression)
           Digit      <- '0'/'1'/'2'/'3'/'4'/'5'/'6'/'7'/'8'/'9'   ;
           Sign       <- '-' / '+'                       ;
           Number     <- Sign? Digit+                         ;
           Expression <- '(' Expression ')' / (Factor (MulOp Factor)*)  ;
           MulOp      <- '*' / '/'                       ;
           Factor     <- Term (AddOp Term)*                   ;
           AddOp      <- '+'/'-'                         ;
           Term       <- Number                     ;
       END;


       then its canonical serialization (except for whitespace) is


       pt::grammar::peg {
           rules {
            AddOp      {is {/ {t -} {t +}}                                                                mode value}
            Digit      {is {/ {t 0} {t 1} {t 2} {t 3} {t 4} {t 5} {t 6} {t 7} {t 8} {t 9}}                mode value}
            Expression {is {/ {x {t (} {n Expression} {t )}} {x {n Factor} {* {x {n MulOp} {n Factor}}}}} mode value}
            Factor     {is {x {n Term} {* {x {n AddOp} {n Term}}}}                                        mode value}
            MulOp      {is {/ {t *} {t /}}                                                                mode value}
            Number     {is {x {? {n Sign}} {+ {n Digit}}}                                                 mode value}
            Sign       {is {/ {t -} {t +}}                                                                mode value}
            Term       {is  {n Number}                                                                    mode value}
           }
           start {n Expression}
       }


PE SERIALIZATION FORMAT
       Here we specify the format used by the Parser Tools to serialize Parsing
       Expressions as immutable values for transport, comparison, etc.

       We distinguish between regular and canonical serializations.  While a
       parsing expression may have more than one regular serialization only
       exactly one of them will be canonical.

       Regular serialization

              Atomic Parsing Expressions

                     [1]    The string epsilon is an atomic parsing expression.
                            It matches the empty string.

                     [2]    The string dot is an atomic parsing expression. It
                            matches any character.

                     [3]    The string alnum is an atomic parsing expression. It
                            matches any Unicode alphabet or digit character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [4]    The string alpha is an atomic parsing expression. It
                            matches any Unicode alphabet character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [5]    The string ascii is an atomic parsing expression. It
                            matches any Unicode character below U0080. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [6]    The string control is an atomic parsing expression.
                            It matches any Unicode control character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [7]    The string digit is an atomic parsing expression. It
                            matches any Unicode digit character. Note that this
                            includes characters outside of the [0..9] range.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [8]    The string graph is an atomic parsing expression. It
                            matches any Unicode printing character, except for
                            space. This is a custom extension of PEs based on
                            Tcl's builtin command string is.

                     [9]    The string lower is an atomic parsing expression. It
                            matches any Unicode lower-case alphabet character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [10]   The string print is an atomic parsing expression. It
                            matches any Unicode printing character, including
                            space. This is a custom extension of PEs based on
                            Tcl's builtin command string is.

                     [11]   The string punct is an atomic parsing expression. It
                            matches any Unicode punctuation character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [12]   The string space is an atomic parsing expression. It
                            matches any Unicode space character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command string is.

                     [13]   The string upper is an atomic parsing expression. It
                            matches any Unicode upper-case alphabet character.
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [14]   The string wordchar is an atomic parsing expression.
                            It matches any Unicode word character. This is any
                            alphanumeric character (see alnum), and any
                            connector punctuation characters (e.g.  underscore).
                            This is a custom extension of PEs based on Tcl's
                            builtin command string is.

                     [15]   The string xdigit is an atomic parsing expression.
                            It matches any hexadecimal digit character. This is
                            a custom extension of PEs based on Tcl's builtin
                            command string is.

                     [16]   The string ddigit is an atomic parsing expression.
                            It matches any decimal digit character. This is a
                            custom extension of PEs based on Tcl's builtin
                            command regexp.

                     [17]   The expression [list t x] is an atomic parsing
                            expression. It matches the terminal string x.

                     [18]   The expression [list n A] is an atomic parsing
                            expression. It matches the nonterminal A.

              Combined Parsing Expressions

                     [1]    For parsing expressions e1, e2, ... the result of
                            [list / e1 e2 ... ] is a parsing expression as well.
                            This is the ordered choice, aka prioritized choice.

                     [2]    For parsing expressions e1, e2, ... the result of
                            [list x e1 e2 ... ] is a parsing expression as well.
                            This is the sequence.

                     [3]    For a parsing expression e the result of [list * e]
                            is a parsing expression as well.  This is the kleene
                            closure, describing zero or more repetitions.

                     [4]    For a parsing expression e the result of [list + e]
                            is a parsing expression as well.  This is the
                            positive kleene closure, describing one or more
                            repetitions.

                     [5]    For a parsing expression e the result of [list & e]
                            is a parsing expression as well.  This is the and
                            lookahead predicate.

                     [6]    For a parsing expression e the result of [list ! e]
                            is a parsing expression as well.  This is the not
                            lookahead predicate.

                     [7]    For a parsing expression e the result of [list ? e]
                            is a parsing expression as well.  This is the
                            optional input.

       Canonical serialization
              The canonical serialization of a parsing expression has the format
              as specified in the previous item, and then additionally satisfies
              the constraints below, which make it unique among all the possible
              serializations of this parsing expression.

              [1]    The string representation of the value is the canonical
                     representation of a pure Tcl list. I.e. it does not contain
                     superfluous whitespace.

              [2]    Terminals are not encoded as ranges (where start and end of
                     the range are identical).

   EXAMPLE
       Assuming the parsing expression shown on the right-hand side of the rule


           Expression <- '(' Expression ')'
                       / Factor (MulOp Factor)*


       then its canonical serialization (except for whitespace) is


           {/ {x {t (} {n Expression} {t )}} {x {n Factor} {* {x {n MulOp} {n Factor}}}}}


BUGS, IDEAS, FEEDBACK
       This document, and the package it describes, will undoubtedly contain
       bugs and other problems.  Please report such in the category pt of the
       Tcllib SF Trackers [http://sourceforge.net/tracker/?group_id=12883].
       Please also report any ideas for enhancements you may have for either
       package and/or documentation.

KEYWORDS
       EBNF, LL(k), PARAM, PEG, TDPL, context-free languages, conversion,
       expression, format conversion, grammar, matching, parser, parsing
       expression, parsing expression grammar, push down automaton, recursive
       descent, serialization, state, top-down parsing languages, transducer

CATEGORY
       Parsing and Grammars

COPYRIGHT
       Copyright (c) 2009 Andreas Kupries <andreas_kupries@users.sourceforge.net>




